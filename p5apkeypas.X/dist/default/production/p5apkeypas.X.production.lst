

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Sep  8 12:44:53 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,space=0,delta=2
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28     0000                     
    29                           ; Generated 12/10/2023 GMT
    30                           ; 
    31                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F887 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63     0004                     fsr             equ	4
    64     0004                     fsr0            equ	4
    65     0000                     indf            equ	0
    66     0000                     indf0           equ	0
    67     0002                     pc              equ	2
    68     0002                     pcl             equ	2
    69     000A                     pclath          equ	10
    70     0003                     status          equ	3
    71     0000                     INDF            equ	0	;# 
    72     0001                     TMR0            equ	1	;# 
    73     0002                     PCL             equ	2	;# 
    74     0003                     STATUS          equ	3	;# 
    75     0004                     FSR             equ	4	;# 
    76     0005                     PORTA           equ	5	;# 
    77     0006                     PORTB           equ	6	;# 
    78     0007                     PORTC           equ	7	;# 
    79     0008                     PORTD           equ	8	;# 
    80     0009                     PORTE           equ	9	;# 
    81     000A                     PCLATH          equ	10	;# 
    82     000B                     INTCON          equ	11	;# 
    83     000C                     PIR1            equ	12	;# 
    84     000D                     PIR2            equ	13	;# 
    85     000E                     TMR1            equ	14	;# 
    86     000E                     TMR1L           equ	14	;# 
    87     000F                     TMR1H           equ	15	;# 
    88     0010                     T1CON           equ	16	;# 
    89     0011                     TMR2            equ	17	;# 
    90     0012                     T2CON           equ	18	;# 
    91     0013                     SSPBUF          equ	19	;# 
    92     0014                     SSPCON          equ	20	;# 
    93     0015                     CCPR1           equ	21	;# 
    94     0015                     CCPR1L          equ	21	;# 
    95     0016                     CCPR1H          equ	22	;# 
    96     0017                     CCP1CON         equ	23	;# 
    97     0018                     RCSTA           equ	24	;# 
    98     0019                     TXREG           equ	25	;# 
    99     001A                     RCREG           equ	26	;# 
   100     001B                     CCPR2           equ	27	;# 
   101     001B                     CCPR2L          equ	27	;# 
   102     001C                     CCPR2H          equ	28	;# 
   103     001D                     CCP2CON         equ	29	;# 
   104     001E                     ADRESH          equ	30	;# 
   105     001F                     ADCON0          equ	31	;# 
   106     0081                     OPTION_REG      equ	129	;# 
   107     0085                     TRISA           equ	133	;# 
   108     0086                     TRISB           equ	134	;# 
   109     0087                     TRISC           equ	135	;# 
   110     0088                     TRISD           equ	136	;# 
   111     0089                     TRISE           equ	137	;# 
   112     008C                     PIE1            equ	140	;# 
   113     008D                     PIE2            equ	141	;# 
   114     008E                     PCON            equ	142	;# 
   115     008F                     OSCCON          equ	143	;# 
   116     0090                     OSCTUNE         equ	144	;# 
   117     0091                     SSPCON2         equ	145	;# 
   118     0092                     PR2             equ	146	;# 
   119     0093                     SSPADD          equ	147	;# 
   120     0093                     SSPMSK          equ	147	;# 
   121     0093                     MSK             equ	147	;# 
   122     0094                     SSPSTAT         equ	148	;# 
   123     0095                     WPUB            equ	149	;# 
   124     0096                     IOCB            equ	150	;# 
   125     0097                     VRCON           equ	151	;# 
   126     0098                     TXSTA           equ	152	;# 
   127     0099                     SPBRG           equ	153	;# 
   128     009A                     SPBRGH          equ	154	;# 
   129     009B                     PWM1CON         equ	155	;# 
   130     009C                     ECCPAS          equ	156	;# 
   131     009D                     PSTRCON         equ	157	;# 
   132     009E                     ADRESL          equ	158	;# 
   133     009F                     ADCON1          equ	159	;# 
   134     0105                     WDTCON          equ	261	;# 
   135     0107                     CM1CON0         equ	263	;# 
   136     0108                     CM2CON0         equ	264	;# 
   137     0109                     CM2CON1         equ	265	;# 
   138     010C                     EEDATA          equ	268	;# 
   139     010C                     EEDAT           equ	268	;# 
   140     010D                     EEADR           equ	269	;# 
   141     010E                     EEDATH          equ	270	;# 
   142     010F                     EEADRH          equ	271	;# 
   143     0185                     SRCON           equ	389	;# 
   144     0187                     BAUDCTL         equ	391	;# 
   145     0188                     ANSEL           equ	392	;# 
   146     0189                     ANSELH          equ	393	;# 
   147     018C                     EECON1          equ	396	;# 
   148     018D                     EECON2          equ	397	;# 
   149     0000                     INDF            equ	0	;# 
   150     0001                     TMR0            equ	1	;# 
   151     0002                     PCL             equ	2	;# 
   152     0003                     STATUS          equ	3	;# 
   153     0004                     FSR             equ	4	;# 
   154     0005                     PORTA           equ	5	;# 
   155     0006                     PORTB           equ	6	;# 
   156     0007                     PORTC           equ	7	;# 
   157     0008                     PORTD           equ	8	;# 
   158     0009                     PORTE           equ	9	;# 
   159     000A                     PCLATH          equ	10	;# 
   160     000B                     INTCON          equ	11	;# 
   161     000C                     PIR1            equ	12	;# 
   162     000D                     PIR2            equ	13	;# 
   163     000E                     TMR1            equ	14	;# 
   164     000E                     TMR1L           equ	14	;# 
   165     000F                     TMR1H           equ	15	;# 
   166     0010                     T1CON           equ	16	;# 
   167     0011                     TMR2            equ	17	;# 
   168     0012                     T2CON           equ	18	;# 
   169     0013                     SSPBUF          equ	19	;# 
   170     0014                     SSPCON          equ	20	;# 
   171     0015                     CCPR1           equ	21	;# 
   172     0015                     CCPR1L          equ	21	;# 
   173     0016                     CCPR1H          equ	22	;# 
   174     0017                     CCP1CON         equ	23	;# 
   175     0018                     RCSTA           equ	24	;# 
   176     0019                     TXREG           equ	25	;# 
   177     001A                     RCREG           equ	26	;# 
   178     001B                     CCPR2           equ	27	;# 
   179     001B                     CCPR2L          equ	27	;# 
   180     001C                     CCPR2H          equ	28	;# 
   181     001D                     CCP2CON         equ	29	;# 
   182     001E                     ADRESH          equ	30	;# 
   183     001F                     ADCON0          equ	31	;# 
   184     0081                     OPTION_REG      equ	129	;# 
   185     0085                     TRISA           equ	133	;# 
   186     0086                     TRISB           equ	134	;# 
   187     0087                     TRISC           equ	135	;# 
   188     0088                     TRISD           equ	136	;# 
   189     0089                     TRISE           equ	137	;# 
   190     008C                     PIE1            equ	140	;# 
   191     008D                     PIE2            equ	141	;# 
   192     008E                     PCON            equ	142	;# 
   193     008F                     OSCCON          equ	143	;# 
   194     0090                     OSCTUNE         equ	144	;# 
   195     0091                     SSPCON2         equ	145	;# 
   196     0092                     PR2             equ	146	;# 
   197     0093                     SSPADD          equ	147	;# 
   198     0093                     SSPMSK          equ	147	;# 
   199     0093                     MSK             equ	147	;# 
   200     0094                     SSPSTAT         equ	148	;# 
   201     0095                     WPUB            equ	149	;# 
   202     0096                     IOCB            equ	150	;# 
   203     0097                     VRCON           equ	151	;# 
   204     0098                     TXSTA           equ	152	;# 
   205     0099                     SPBRG           equ	153	;# 
   206     009A                     SPBRGH          equ	154	;# 
   207     009B                     PWM1CON         equ	155	;# 
   208     009C                     ECCPAS          equ	156	;# 
   209     009D                     PSTRCON         equ	157	;# 
   210     009E                     ADRESL          equ	158	;# 
   211     009F                     ADCON1          equ	159	;# 
   212     0105                     WDTCON          equ	261	;# 
   213     0107                     CM1CON0         equ	263	;# 
   214     0108                     CM2CON0         equ	264	;# 
   215     0109                     CM2CON1         equ	265	;# 
   216     010C                     EEDATA          equ	268	;# 
   217     010C                     EEDAT           equ	268	;# 
   218     010D                     EEADR           equ	269	;# 
   219     010E                     EEDATH          equ	270	;# 
   220     010F                     EEADRH          equ	271	;# 
   221     0185                     SRCON           equ	389	;# 
   222     0187                     BAUDCTL         equ	391	;# 
   223     0188                     ANSEL           equ	392	;# 
   224     0189                     ANSELH          equ	393	;# 
   225     018C                     EECON1          equ	396	;# 
   226     018D                     EECON2          equ	397	;# 
   227     0000                     INDF            equ	0	;# 
   228     0001                     TMR0            equ	1	;# 
   229     0002                     PCL             equ	2	;# 
   230     0003                     STATUS          equ	3	;# 
   231     0004                     FSR             equ	4	;# 
   232     0005                     PORTA           equ	5	;# 
   233     0006                     PORTB           equ	6	;# 
   234     0007                     PORTC           equ	7	;# 
   235     0008                     PORTD           equ	8	;# 
   236     0009                     PORTE           equ	9	;# 
   237     000A                     PCLATH          equ	10	;# 
   238     000B                     INTCON          equ	11	;# 
   239     000C                     PIR1            equ	12	;# 
   240     000D                     PIR2            equ	13	;# 
   241     000E                     TMR1            equ	14	;# 
   242     000E                     TMR1L           equ	14	;# 
   243     000F                     TMR1H           equ	15	;# 
   244     0010                     T1CON           equ	16	;# 
   245     0011                     TMR2            equ	17	;# 
   246     0012                     T2CON           equ	18	;# 
   247     0013                     SSPBUF          equ	19	;# 
   248     0014                     SSPCON          equ	20	;# 
   249     0015                     CCPR1           equ	21	;# 
   250     0015                     CCPR1L          equ	21	;# 
   251     0016                     CCPR1H          equ	22	;# 
   252     0017                     CCP1CON         equ	23	;# 
   253     0018                     RCSTA           equ	24	;# 
   254     0019                     TXREG           equ	25	;# 
   255     001A                     RCREG           equ	26	;# 
   256     001B                     CCPR2           equ	27	;# 
   257     001B                     CCPR2L          equ	27	;# 
   258     001C                     CCPR2H          equ	28	;# 
   259     001D                     CCP2CON         equ	29	;# 
   260     001E                     ADRESH          equ	30	;# 
   261     001F                     ADCON0          equ	31	;# 
   262     0081                     OPTION_REG      equ	129	;# 
   263     0085                     TRISA           equ	133	;# 
   264     0086                     TRISB           equ	134	;# 
   265     0087                     TRISC           equ	135	;# 
   266     0088                     TRISD           equ	136	;# 
   267     0089                     TRISE           equ	137	;# 
   268     008C                     PIE1            equ	140	;# 
   269     008D                     PIE2            equ	141	;# 
   270     008E                     PCON            equ	142	;# 
   271     008F                     OSCCON          equ	143	;# 
   272     0090                     OSCTUNE         equ	144	;# 
   273     0091                     SSPCON2         equ	145	;# 
   274     0092                     PR2             equ	146	;# 
   275     0093                     SSPADD          equ	147	;# 
   276     0093                     SSPMSK          equ	147	;# 
   277     0093                     MSK             equ	147	;# 
   278     0094                     SSPSTAT         equ	148	;# 
   279     0095                     WPUB            equ	149	;# 
   280     0096                     IOCB            equ	150	;# 
   281     0097                     VRCON           equ	151	;# 
   282     0098                     TXSTA           equ	152	;# 
   283     0099                     SPBRG           equ	153	;# 
   284     009A                     SPBRGH          equ	154	;# 
   285     009B                     PWM1CON         equ	155	;# 
   286     009C                     ECCPAS          equ	156	;# 
   287     009D                     PSTRCON         equ	157	;# 
   288     009E                     ADRESL          equ	158	;# 
   289     009F                     ADCON1          equ	159	;# 
   290     0105                     WDTCON          equ	261	;# 
   291     0107                     CM1CON0         equ	263	;# 
   292     0108                     CM2CON0         equ	264	;# 
   293     0109                     CM2CON1         equ	265	;# 
   294     010C                     EEDATA          equ	268	;# 
   295     010C                     EEDAT           equ	268	;# 
   296     010D                     EEADR           equ	269	;# 
   297     010E                     EEDATH          equ	270	;# 
   298     010F                     EEADRH          equ	271	;# 
   299     0185                     SRCON           equ	389	;# 
   300     0187                     BAUDCTL         equ	391	;# 
   301     0188                     ANSEL           equ	392	;# 
   302     0189                     ANSELH          equ	393	;# 
   303     018C                     EECON1          equ	396	;# 
   304     018D                     EECON2          equ	397	;# 
   305     0000                     INDF            equ	0	;# 
   306     0001                     TMR0            equ	1	;# 
   307     0002                     PCL             equ	2	;# 
   308     0003                     STATUS          equ	3	;# 
   309     0004                     FSR             equ	4	;# 
   310     0005                     PORTA           equ	5	;# 
   311     0006                     PORTB           equ	6	;# 
   312     0007                     PORTC           equ	7	;# 
   313     0008                     PORTD           equ	8	;# 
   314     0009                     PORTE           equ	9	;# 
   315     000A                     PCLATH          equ	10	;# 
   316     000B                     INTCON          equ	11	;# 
   317     000C                     PIR1            equ	12	;# 
   318     000D                     PIR2            equ	13	;# 
   319     000E                     TMR1            equ	14	;# 
   320     000E                     TMR1L           equ	14	;# 
   321     000F                     TMR1H           equ	15	;# 
   322     0010                     T1CON           equ	16	;# 
   323     0011                     TMR2            equ	17	;# 
   324     0012                     T2CON           equ	18	;# 
   325     0013                     SSPBUF          equ	19	;# 
   326     0014                     SSPCON          equ	20	;# 
   327     0015                     CCPR1           equ	21	;# 
   328     0015                     CCPR1L          equ	21	;# 
   329     0016                     CCPR1H          equ	22	;# 
   330     0017                     CCP1CON         equ	23	;# 
   331     0018                     RCSTA           equ	24	;# 
   332     0019                     TXREG           equ	25	;# 
   333     001A                     RCREG           equ	26	;# 
   334     001B                     CCPR2           equ	27	;# 
   335     001B                     CCPR2L          equ	27	;# 
   336     001C                     CCPR2H          equ	28	;# 
   337     001D                     CCP2CON         equ	29	;# 
   338     001E                     ADRESH          equ	30	;# 
   339     001F                     ADCON0          equ	31	;# 
   340     0081                     OPTION_REG      equ	129	;# 
   341     0085                     TRISA           equ	133	;# 
   342     0086                     TRISB           equ	134	;# 
   343     0087                     TRISC           equ	135	;# 
   344     0088                     TRISD           equ	136	;# 
   345     0089                     TRISE           equ	137	;# 
   346     008C                     PIE1            equ	140	;# 
   347     008D                     PIE2            equ	141	;# 
   348     008E                     PCON            equ	142	;# 
   349     008F                     OSCCON          equ	143	;# 
   350     0090                     OSCTUNE         equ	144	;# 
   351     0091                     SSPCON2         equ	145	;# 
   352     0092                     PR2             equ	146	;# 
   353     0093                     SSPADD          equ	147	;# 
   354     0093                     SSPMSK          equ	147	;# 
   355     0093                     MSK             equ	147	;# 
   356     0094                     SSPSTAT         equ	148	;# 
   357     0095                     WPUB            equ	149	;# 
   358     0096                     IOCB            equ	150	;# 
   359     0097                     VRCON           equ	151	;# 
   360     0098                     TXSTA           equ	152	;# 
   361     0099                     SPBRG           equ	153	;# 
   362     009A                     SPBRGH          equ	154	;# 
   363     009B                     PWM1CON         equ	155	;# 
   364     009C                     ECCPAS          equ	156	;# 
   365     009D                     PSTRCON         equ	157	;# 
   366     009E                     ADRESL          equ	158	;# 
   367     009F                     ADCON1          equ	159	;# 
   368     0105                     WDTCON          equ	261	;# 
   369     0107                     CM1CON0         equ	263	;# 
   370     0108                     CM2CON0         equ	264	;# 
   371     0109                     CM2CON1         equ	265	;# 
   372     010C                     EEDATA          equ	268	;# 
   373     010C                     EEDAT           equ	268	;# 
   374     010D                     EEADR           equ	269	;# 
   375     010E                     EEDATH          equ	270	;# 
   376     010F                     EEADRH          equ	271	;# 
   377     0185                     SRCON           equ	389	;# 
   378     0187                     BAUDCTL         equ	391	;# 
   379     0188                     ANSEL           equ	392	;# 
   380     0189                     ANSELH          equ	393	;# 
   381     018C                     EECON1          equ	396	;# 
   382     018D                     EECON2          equ	397	;# 
   383     0008                     _PORTD          set	8
   384     0008                     _PORTDbits      set	8
   385     0006                     _PORTB          set	6
   386     0019                     _TXREG          set	25
   387     000C                     _PIR1bits       set	12
   388     0018                     _RCSTAbits      set	24
   389     0009                     _PORTEbits      set	9
   390     0001                     _TMR0           set	1
   391     000B                     _INTCONbits     set	11
   392     0088                     _TRISDbits      set	136
   393     0088                     _TRISD          set	136
   394     0086                     _TRISB          set	134
   395     0099                     _SPBRG          set	153
   396     0098                     _TXSTAbits      set	152
   397     0081                     _OPTION_REGbits set	129
   398     0089                     _TRISEbits      set	137
   399     008F                     _OSCCONbits     set	143
   400     0189                     _ANSELH         set	393
   401     0188                     _ANSEL          set	392
   402                           
   403                           	psect	strings
   404     0265                     __pstrings:
   405     0265                     stringtab:
   406     0265                     __stringtab:
   407     0265                     stringcode:	
   408                           ;	String table - string pointers are 1 byte each
   409                           
   410     0265                     stringdir:
   411     0265  3002               	movlw	high stringdir
   412     0266  008A               	movwf	10
   413     0267  0804               	movf	4,w
   414     0268  0A84               	incf	4,f
   415     0269  0782               	addwf	2,f
   416     026A                     __stringbase:
   417     026A  3400               	retlw	0
   418     026B                     __end_of__stringtab:
   419     026B                     STR_1:
   420     026B  3420               	retlw	32	;' '
   421     026C  3450               	retlw	80	;'P'
   422     026D  3441               	retlw	65	;'A'
   423     026E  3453               	retlw	83	;'S'
   424     026F  3453               	retlw	83	;'S'
   425     0270  3457               	retlw	87	;'W'
   426     0271  344F               	retlw	79	;'O'
   427     0272  3452               	retlw	82	;'R'
   428     0273  3444               	retlw	68	;'D'
   429     0274  3400               	retlw	0
   430     0275                     STR_4:
   431     0275  3420               	retlw	32	;' '
   432     0276  3443               	retlw	67	;'C'
   433     0277  346F               	retlw	111	;'o'
   434     0278  3472               	retlw	114	;'r'
   435     0279  3472               	retlw	114	;'r'
   436     027A  3465               	retlw	101	;'e'
   437     027B  3463               	retlw	99	;'c'
   438     027C  3474               	retlw	116	;'t'
   439     027D  346F               	retlw	111	;'o'
   440     027E  3400               	retlw	0
   441     027F                     STR_5:
   442     027F  3420               	retlw	32	;' '
   443     0280  3420               	retlw	32	;' '
   444     0281  3445               	retlw	69	;'E'
   445     0282  3472               	retlw	114	;'r'
   446     0283  3472               	retlw	114	;'r'
   447     0284  346F               	retlw	111	;'o'
   448     0285  3472               	retlw	114	;'r'
   449     0286  3420               	retlw	32	;' '
   450     0287  3400               	retlw	0
   451     0288                     STR_2:
   452     0288  3420               	retlw	32	;' '
   453     0289  3420               	retlw	32	;' '
   454     028A  345B               	retlw	91	;'['
   455     028B  3420               	retlw	32	;' '
   456     028C  3420               	retlw	32	;' '
   457     028D  3420               	retlw	32	;' '
   458     028E  3420               	retlw	32	;' '
   459     028F  345D               	retlw	93	;']'
   460     0290  3400               	retlw	0
   461     0291                     STR_3:
   462     0291  3433               	retlw	51	;'3'
   463     0292  3430               	retlw	48	;'0'
   464     0293  3432               	retlw	50	;'2'
   465     0294  3432               	retlw	50	;'2'
   466     0295  3400               	retlw	0
   467                           
   468                           	psect	cinit
   469     000F                     start_initialization:	
   470                           ; #config settings
   471                           
   472     000F                     __initialization:
   473                           
   474                           ; Clear objects allocated to BITCOMMON
   475     000F  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   476                           
   477                           ; Clear objects allocated to COMMON
   478     0010  01F8               	clrf	__pbssCOMMON& (0+127)
   479     0011  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   480                           
   481                           ; Clear objects allocated to BANK0
   482     0012  1283               	bcf	3,5	;RP0=0, select bank0
   483     0013  1303               	bcf	3,6	;RP1=0, select bank0
   484     0014  01A0               	clrf	__pbssBANK0& (0+127)
   485     0015  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   486     0016  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   487     0017  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   488     0018  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   489     0019  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   490     001A  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   491     001B  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   492     001C  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   493     001D  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   494     001E  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   495     001F  01AB               	clrf	(__pbssBANK0+11)& (0+127)
   496     0020  01AC               	clrf	(__pbssBANK0+12)& (0+127)
   497     0021  01AD               	clrf	(__pbssBANK0+13)& (0+127)
   498     0022                     end_of_initialization:	
   499                           ;End of C runtime variable initialization code
   500                           
   501     0022                     __end_of__initialization:
   502     0022  0183               	clrf	3
   503     0023  120A  118A  2B51   	ljmp	_main	;jump to C main() function
   504                           
   505                           	psect	bitbssCOMMON
   506     03D0                     __pbitbssCOMMON:
   507     03D0                     _tickms:
   508     03D0                     	ds	1
   509                           
   510                           	psect	bssCOMMON
   511     0078                     __pbssCOMMON:
   512     0078                     taskAPP@state:
   513     0078                     	ds	1
   514     0079                     taskAPP@keycnt:
   515     0079                     	ds	1
   516                           
   517                           	psect	bssBANK0
   518     0020                     __pbssBANK0:
   519     0020                     LCDWriteNum@F1440:
   520     0020                     	ds	5
   521     0025                     taskAPP@cnt:
   522     0025                     	ds	2
   523     0027                     taskLED@cnt:
   524     0027                     	ds	2
   525     0029                     _pass:
   526     0029                     	ds	5
   527                           
   528                           	psect	cstackCOMMON
   529     0070                     __pcstackCOMMON:
   530     0070                     ?_setupMCU:
   531     0070                     ?_LCDSetup:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0070                     ?_KBSetup:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0070                     ?_taskLED:	
   538                           ; 1 bytes @ 0x0
   539                           
   540     0070                     ?_taskAPP:	
   541                           ; 1 bytes @ 0x0
   542                           
   543     0070                     ?_KBScan:	
   544                           ; 1 bytes @ 0x0
   545                           
   546     0070                     ?_KBGetChar:	
   547                           ; 1 bytes @ 0x0
   548                           
   549     0070                     ?_LCDWriteChar:	
   550                           ; 1 bytes @ 0x0
   551                           
   552     0070                     ?_LCDWriteCMD:	
   553                           ; 1 bytes @ 0x0
   554                           
   555     0070                     ?_isr:	
   556                           ; 1 bytes @ 0x0
   557                           
   558     0070                     ?_main:	
   559                           ; 1 bytes @ 0x0
   560                           
   561     0070                     ??_isr:	
   562                           ; 1 bytes @ 0x0
   563                           
   564                           
   565                           ; 1 bytes @ 0x0
   566     0070                     	ds	2
   567     0072                     ?_LCDGotoXY:
   568     0072                     ?_strcmp:	
   569                           ; 1 bytes @ 0x2
   570                           
   571     0072                     KBGetChar@n:	
   572                           ; 2 bytes @ 0x2
   573                           
   574     0072                     LCDGotoXY@row:	
   575                           ; 1 bytes @ 0x2
   576                           
   577     0072                     strcmp@l:	
   578                           ; 1 bytes @ 0x2
   579                           
   580     0072                     ??_setupMCU:	
   581                           ; 1 bytes @ 0x2
   582                           
   583     0072                     ??_KBSetup:	
   584                           ; 1 bytes @ 0x2
   585                           
   586     0072                     ??_taskLED:	
   587                           ; 1 bytes @ 0x2
   588                           
   589     0072                     ??_KBScan:	
   590                           ; 1 bytes @ 0x2
   591                           
   592     0072                     ??_KBGetChar:	
   593                           ; 1 bytes @ 0x2
   594                           
   595     0072                     ??_LCDWriteChar:	
   596                           ; 1 bytes @ 0x2
   597                           
   598     0072                     ??_LCDWriteCMD:	
   599                           ; 1 bytes @ 0x2
   600                           
   601                           
   602                           ; 1 bytes @ 0x2
   603     0072                     	ds	1
   604     0073                     KBScan@i:
   605     0073                     LCDWriteChar@data:	
   606                           ; 1 bytes @ 0x3
   607                           
   608     0073                     LCDWriteCMD@cmd:	
   609                           ; 1 bytes @ 0x3
   610                           
   611     0073                     strcmp@r:	
   612                           ; 1 bytes @ 0x3
   613                           
   614     0073                     ??_LCDGotoXY:	
   615                           ; 1 bytes @ 0x3
   616                           
   617                           
   618                           ; 1 bytes @ 0x3
   619     0073                     	ds	1
   620     0074                     ?_LCDWriteMsg:
   621     0074                     KBScan@row:	
   622                           ; 1 bytes @ 0x4
   623                           
   624     0074                     LCDGotoXY@col:	
   625                           ; 1 bytes @ 0x4
   626                           
   627     0074                     LCDWriteMsg@str:	
   628                           ; 1 bytes @ 0x4
   629                           
   630     0074                     ??_LCDSetup:	
   631                           ; 1 bytes @ 0x4
   632                           
   633     0074                     ??_strcmp:	
   634                           ; 1 bytes @ 0x4
   635                           
   636                           
   637                           ; 1 bytes @ 0x4
   638     0074                     	ds	1
   639     0075                     KBScan@col:
   640     0075                     LCDGotoXY@DDaddr:	
   641                           ; 1 bytes @ 0x5
   642                           
   643     0075                     ??_LCDWriteMsg:	
   644                           ; 1 bytes @ 0x5
   645                           
   646                           
   647                           ; 1 bytes @ 0x5
   648     0075                     	ds	1
   649     0076                     ??_taskAPP:
   650                           
   651                           ; 1 bytes @ 0x6
   652     0076                     	ds	2
   653     0078                     ??_main:
   654                           
   655                           	psect	cstackBANK0
   656     002E                     __pcstackBANK0:	
   657                           ; 1 bytes @ 0x8
   658                           
   659     002E                     taskAPP@value:
   660                           
   661                           ; 1 bytes @ 0x0
   662     002E                     	ds	1
   663     002F                     taskAPP@res:
   664                           
   665                           ; 1 bytes @ 0x1
   666     002F                     	ds	1
   667                           
   668                           	psect	maintext
   669     0351                     __pmaintext:	
   670 ;;
   671 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   672 ;;
   673 ;; *************** function _main *****************
   674 ;; Defined at:
   675 ;;		line 29 in file "main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;		None
   678 ;; Auto vars:     Size  Location     Type
   679 ;;		None
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : B00/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         0       0       0       0       0
   690 ;;      Locals:         0       0       0       0       0
   691 ;;      Temps:          0       0       0       0       0
   692 ;;      Totals:         0       0       0       0       0
   693 ;;Total ram usage:        0 bytes
   694 ;; Hardware stack levels required when called: 4
   695 ;; This function calls:
   696 ;;		_KBSetup
   697 ;;		_LCDSetup
   698 ;;		_setupMCU
   699 ;;		_taskAPP
   700 ;;		_taskLED
   701 ;; This function is called by:
   702 ;;		Startup code after reset
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706     0351                     _main:	
   707                           ;psect for function _main
   708                           
   709     0351                     l1938:	
   710                           ;incstack = 0
   711                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   712                           
   713                           
   714                           ;main.c: 31:     setupMCU();
   715     0351  120A  118A  22C6  120A  118A  	fcall	_setupMCU
   716                           
   717                           ;main.c: 32:     LCDSetup();
   718     0356  120A  118A  2106  120A  118A  	fcall	_LCDSetup
   719     035B                     l1940:
   720                           
   721                           ;main.c: 33:     KBSetup();
   722     035B  120A  118A  23BE  120A  118A  	fcall	_KBSetup
   723     0360                     l1942:
   724                           
   725                           ;main.c: 35:     {;main.c: 36:         if(tickms)
   726     0360  1C7A               	btfss	_tickms/(0+8),_tickms& (0+7)	;volatile
   727     0361  2B63               	goto	u961
   728     0362  2B64               	goto	u960
   729     0363                     u961:
   730     0363  2B60               	goto	l1942
   731     0364                     u960:
   732     0364                     l1944:
   733                           
   734                           ;main.c: 37:         {;main.c: 38:             tickms = 0;
   735     0364  107A               	bcf	_tickms/(0+8),_tickms& (0+7)	;volatile
   736     0365                     l1946:
   737                           
   738                           ;main.c: 39:             taskLED();
   739     0365  120A  118A  2373  120A  118A  	fcall	_taskLED
   740     036A                     l1948:
   741                           
   742                           ;main.c: 40:             taskAPP();
   743     036A  120A  118A  2026  120A  118A  	fcall	_taskAPP
   744     036F  2B60               	goto	l1942
   745     0370  120A  118A  280C   	ljmp	start
   746     0373                     __end_of_main:
   747                           
   748                           	psect	text1
   749     0373                     __ptext1:	
   750 ;; *************** function _taskLED *****************
   751 ;; Defined at:
   752 ;;		line 69 in file "main.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;		None
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, status,2, status,0
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   766 ;;      Params:         0       0       0       0       0
   767 ;;      Locals:         0       0       0       0       0
   768 ;;      Temps:          2       0       0       0       0
   769 ;;      Totals:         2       0       0       0       0
   770 ;;Total ram usage:        2 bytes
   771 ;; Hardware stack levels used: 1
   772 ;; Hardware stack levels required when called: 1
   773 ;; This function calls:
   774 ;;		Nothing
   775 ;; This function is called by:
   776 ;;		_main
   777 ;; This function uses a non-reentrant model
   778 ;;
   779                           
   780     0373                     _taskLED:	
   781                           ;psect for function _taskLED
   782                           
   783     0373                     l1444:	
   784                           ;incstack = 0
   785                           ; Regs used in _taskLED: [wreg+status,2+status,0]
   786                           
   787                           
   788                           ;main.c: 71:     static uint16_t cnt = 0;;main.c: 72:     if(cnt++ > 999)
   789     0373  1283               	bcf	3,5	;RP0=0, select bank0
   790     0374  1303               	bcf	3,6	;RP1=0, select bank0
   791     0375  0828               	movf	taskLED@cnt+1,w
   792     0376  00F3               	movwf	??_taskLED+1
   793     0377  0827               	movf	taskLED@cnt,w
   794     0378  00F2               	movwf	??_taskLED
   795     0379  0AA7               	incf	taskLED@cnt,f
   796     037A  1903               	skipnz
   797     037B  0AA8               	incf	taskLED@cnt+1,f
   798     037C  3003               	movlw	3
   799     037D  0273               	subwf	??_taskLED+1,w
   800     037E  30E8               	movlw	232
   801     037F  1903               	skipnz
   802     0380  0272               	subwf	??_taskLED,w
   803     0381  1C03               	skipc
   804     0382  2B84               	goto	u431
   805     0383  2B85               	goto	u430
   806     0384                     u431:
   807     0384  2B88               	goto	l1450
   808     0385                     u430:
   809     0385                     l1446:
   810                           
   811                           ;main.c: 73:     {;main.c: 74:         cnt = 0;
   812     0385  01A7               	clrf	taskLED@cnt
   813     0386  01A8               	clrf	taskLED@cnt+1
   814     0387                     l1448:
   815                           
   816                           ;main.c: 75:         PORTEbits.RE2 = 1;
   817     0387  1509               	bsf	9,2	;volatile
   818     0388                     l1450:
   819                           
   820                           ;main.c: 77:     if(cnt == 200) PORTEbits.RE2 = 0;
   821     0388  30C8               	movlw	200
   822     0389  0627               	xorwf	taskLED@cnt,w
   823     038A  0428               	iorwf	taskLED@cnt+1,w
   824     038B  1D03               	btfss	3,2
   825     038C  2B8E               	goto	u441
   826     038D  2B8F               	goto	u440
   827     038E                     u441:
   828     038E  2B90               	goto	l82
   829     038F                     u440:
   830     038F                     l1452:
   831     038F  1109               	bcf	9,2	;volatile
   832     0390                     l82:
   833     0390  0008               	return
   834     0391                     __end_of_taskLED:
   835                           
   836                           	psect	text2
   837     0026                     __ptext2:	
   838 ;; *************** function _taskAPP *****************
   839 ;; Defined at:
   840 ;;		line 80 in file "main.c"
   841 ;; Parameters:    Size  Location     Type
   842 ;;		None
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  res             1    1[BANK0 ] unsigned char 
   845 ;;  value           1    0[BANK0 ] unsigned char 
   846 ;; Return value:  Size  Location     Type
   847 ;;                  1    wreg      void 
   848 ;; Registers used:
   849 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   850 ;; Tracked objects:
   851 ;;		On entry : 0/0
   852 ;;		On exit  : 0/0
   853 ;;		Unchanged: 0/0
   854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   855 ;;      Params:         0       0       0       0       0
   856 ;;      Locals:         0       2       0       0       0
   857 ;;      Temps:          2       0       0       0       0
   858 ;;      Totals:         2       2       0       0       0
   859 ;;Total ram usage:        4 bytes
   860 ;; Hardware stack levels used: 1
   861 ;; Hardware stack levels required when called: 3
   862 ;; This function calls:
   863 ;;		_KBGetChar
   864 ;;		_KBScan
   865 ;;		_LCDGotoXY
   866 ;;		_LCDWriteCMD
   867 ;;		_LCDWriteChar
   868 ;;		_LCDWriteMsg
   869 ;;		_strcmp
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875     0026                     _taskAPP:	
   876                           ;psect for function _taskAPP
   877                           
   878     0026                     l1880:	
   879                           ;incstack = 0
   880                           ; Regs used in _taskAPP: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   881                           
   882                           
   883                           ;main.c: 82:     static uint8_t keycnt, state = 0;;main.c: 83:     static uint16_t cnt =
      +                           0;;main.c: 84:     uint8_t res, value;;main.c: 85:     switch(state)
   884     0026  28F1               	goto	l1936
   885     0027                     l1882:
   886                           
   887                           ;main.c: 88:             LCDGotoXY(0,0);
   888     0027  01F2               	clrf	LCDGotoXY@row
   889     0028  3000               	movlw	0
   890     0029  120A  118A  21E7  120A  118A  	fcall	_LCDGotoXY
   891                           
   892                           ;main.c: 89:             LCDWriteMsg(" PASSWORD");
   893     002E  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   894     002F  00F4               	movwf	LCDWriteMsg@str
   895     0030  120A  118A  2391  120A  118A  	fcall	_LCDWriteMsg
   896                           
   897                           ;main.c: 90:             LCDGotoXY(0,1);
   898     0035  01F2               	clrf	LCDGotoXY@row
   899     0036  0AF2               	incf	LCDGotoXY@row,f
   900     0037  3000               	movlw	0
   901     0038  120A  118A  21E7  120A  118A  	fcall	_LCDGotoXY
   902                           
   903                           ;main.c: 91:             LCDWriteMsg("  [    ]");
   904     003D  301E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   905     003E  00F4               	movwf	LCDWriteMsg@str
   906     003F  120A  118A  2391  120A  118A  	fcall	_LCDWriteMsg
   907                           
   908                           ;main.c: 92:             LCDGotoXY(3,1);
   909     0044  01F2               	clrf	LCDGotoXY@row
   910     0045  0AF2               	incf	LCDGotoXY@row,f
   911     0046  3003               	movlw	3
   912     0047  120A  118A  21E7  120A  118A  	fcall	_LCDGotoXY
   913     004C                     l1884:
   914                           
   915                           ;main.c: 93:             cnt = 0;
   916     004C  1283               	bcf	3,5	;RP0=0, select bank0
   917     004D  1303               	bcf	3,6	;RP1=0, select bank0
   918     004E  01A5               	clrf	taskAPP@cnt
   919     004F  01A6               	clrf	taskAPP@cnt+1
   920     0050                     l1886:
   921                           
   922                           ;main.c: 94:             keycnt = 0;
   923     0050  01F9               	clrf	taskAPP@keycnt
   924     0051                     l1888:
   925                           
   926                           ;main.c: 95:             state = 1;
   927     0051  3001               	movlw	1
   928     0052  00F8               	movwf	taskAPP@state
   929                           
   930                           ;main.c: 96:             break;
   931     0053  2905               	goto	l108
   932     0054                     l1890:
   933                           
   934                           ;main.c: 98:             res = KBScan();
   935     0054  120A  118A  2296  120A  118A  	fcall	_KBScan
   936     0059  1283               	bcf	3,5	;RP0=0, select bank0
   937     005A  1303               	bcf	3,6	;RP1=0, select bank0
   938     005B  00AF               	movwf	taskAPP@res
   939     005C                     l1892:
   940                           
   941                           ;main.c: 99:             if(res)
   942     005C  082F               	movf	taskAPP@res,w
   943     005D  1903               	btfsc	3,2
   944     005E  2860               	goto	u901
   945     005F  2861               	goto	u900
   946     0060                     u901:
   947     0060  2883               	goto	l1902
   948     0061                     u900:
   949     0061                     l1894:
   950                           
   951                           ;main.c: 100:             {;main.c: 101:                 if(cnt++ > 99)
   952     0061  0826               	movf	taskAPP@cnt+1,w
   953     0062  00F7               	movwf	??_taskAPP+1
   954     0063  0825               	movf	taskAPP@cnt,w
   955     0064  00F6               	movwf	??_taskAPP
   956     0065  0AA5               	incf	taskAPP@cnt,f
   957     0066  1903               	skipnz
   958     0067  0AA6               	incf	taskAPP@cnt+1,f
   959     0068  3000               	movlw	0
   960     0069  0277               	subwf	??_taskAPP+1,w
   961     006A  3064               	movlw	100
   962     006B  1903               	skipnz
   963     006C  0276               	subwf	??_taskAPP,w
   964     006D  1C03               	skipc
   965     006E  2870               	goto	u911
   966     006F  2871               	goto	u910
   967     0070                     u911:
   968     0070  2905               	goto	l108
   969     0071                     u910:
   970     0071                     l1896:
   971                           
   972                           ;main.c: 102:                 {;main.c: 103:                     value = KBGetChar(res);
   973     0071  082F               	movf	taskAPP@res,w
   974     0072  120A  118A  2190  120A  118A  	fcall	_KBGetChar
   975     0077  1283               	bcf	3,5	;RP0=0, select bank0
   976     0078  1303               	bcf	3,6	;RP1=0, select bank0
   977     0079  00AE               	movwf	taskAPP@value
   978     007A                     l1898:
   979                           
   980                           ;main.c: 104:                     LCDWriteChar(value);
   981     007A  082E               	movf	taskAPP@value,w
   982     007B  120A  118A  22F5  120A  118A  	fcall	_LCDWriteChar
   983     0080                     l1900:
   984                           
   985                           ;main.c: 105:                     state = 2;
   986     0080  3002               	movlw	2
   987     0081  00F8               	movwf	taskAPP@state
   988     0082  2905               	goto	l108
   989     0083                     l1902:
   990     0083  01A5               	clrf	taskAPP@cnt
   991     0084  01A6               	clrf	taskAPP@cnt+1
   992     0085  2905               	goto	l108
   993     0086                     l1904:
   994                           
   995                           ;main.c: 110:             pass[keycnt] = value;
   996     0086  0879               	movf	taskAPP@keycnt,w
   997     0087  3E29               	addlw	(low (_pass| 0))& (0+255)
   998     0088  0084               	movwf	4
   999     0089  1283               	bcf	3,5	;RP0=0, select bank0
  1000     008A  1303               	bcf	3,6	;RP1=0, select bank0
  1001     008B  082E               	movf	taskAPP@value,w
  1002     008C  1383               	bcf	3,7	;select IRP bank0
  1003     008D  0080               	movwf	0
  1004     008E                     l1906:
  1005                           
  1006                           ;main.c: 111:             keycnt++;
  1007     008E  3001               	movlw	1
  1008     008F  07F9               	addwf	taskAPP@keycnt,f
  1009     0090                     l1908:
  1010                           
  1011                           ;main.c: 112:             if(keycnt > 3)
  1012     0090  3004               	movlw	4
  1013     0091  0279               	subwf	taskAPP@keycnt,w
  1014     0092  1C03               	skipc
  1015     0093  2895               	goto	u921
  1016     0094  2896               	goto	u920
  1017     0095                     u921:
  1018     0095  289D               	goto	l99
  1019     0096                     u920:
  1020     0096                     l1910:
  1021                           
  1022                           ;main.c: 113:             {;main.c: 114:                 pass[keycnt] = 0;
  1023     0096  0879               	movf	taskAPP@keycnt,w
  1024     0097  3E29               	addlw	(low (_pass| 0))& (0+255)
  1025     0098  0084               	movwf	4
  1026     0099  0180               	clrf	0
  1027     009A                     l1912:
  1028                           
  1029                           ;main.c: 115:                 state = 4;
  1030     009A  3004               	movlw	4
  1031     009B  00F8               	movwf	taskAPP@state
  1032                           
  1033                           ;main.c: 116:             }
  1034     009C  2905               	goto	l108
  1035     009D                     l99:	
  1036                           ;main.c: 117:             else state = 3;
  1037                           
  1038     009D  3003               	movlw	3
  1039     009E  00F8               	movwf	taskAPP@state
  1040     009F  2905               	goto	l108
  1041     00A0                     l1914:
  1042                           
  1043                           ;main.c: 120:             if(!KBScan()) state = 1;
  1044     00A0  120A  118A  2296  120A  118A  	fcall	_KBScan
  1045     00A5  3A00               	xorlw	0
  1046     00A6  1D03               	skipz
  1047     00A7  28A9               	goto	u931
  1048     00A8  28AA               	goto	u930
  1049     00A9                     u931:
  1050     00A9  2905               	goto	l108
  1051     00AA                     u930:
  1052     00AA  2851               	goto	l1888
  1053     00AB                     l1918:
  1054                           
  1055                           ;main.c: 123:             LCDGotoXY(0,1);
  1056     00AB  01F2               	clrf	LCDGotoXY@row
  1057     00AC  0AF2               	incf	LCDGotoXY@row,f
  1058     00AD  3000               	movlw	0
  1059     00AE  120A  118A  21E7  120A  118A  	fcall	_LCDGotoXY
  1060                           
  1061                           ;main.c: 124:             res = (uint8_t) strcmp("3022", pass);
  1062     00B3  3027               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1063     00B4  00F2               	movwf	strcmp@l
  1064     00B5  3029               	movlw	(low (_pass| 0))& (0+255)
  1065     00B6  00F3               	movwf	strcmp@r
  1066     00B7  120A  118A  2232  120A  118A  	fcall	_strcmp
  1067     00BC  0872               	movf	?_strcmp,w
  1068     00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1069     00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1070     00BF  00AF               	movwf	taskAPP@res
  1071     00C0                     l1920:
  1072                           
  1073                           ;main.c: 125:             if(res == 0) LCDWriteMsg(" Correcto");
  1074     00C0  082F               	movf	taskAPP@res,w
  1075     00C1  1D03               	btfss	3,2
  1076     00C2  28C4               	goto	u941
  1077     00C3  28C5               	goto	u940
  1078     00C4                     u941:
  1079     00C4  28CD               	goto	l1924
  1080     00C5                     u940:
  1081     00C5                     l1922:
  1082     00C5  300B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1083     00C6  00F4               	movwf	LCDWriteMsg@str
  1084     00C7  120A  118A  2391  120A  118A  	fcall	_LCDWriteMsg
  1085     00CC  28D4               	goto	l1926
  1086     00CD                     l1924:
  1087     00CD  3015               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1088     00CE  00F4               	movwf	LCDWriteMsg@str
  1089     00CF  120A  118A  2391  120A  118A  	fcall	_LCDWriteMsg
  1090     00D4                     l1926:
  1091                           
  1092                           ;main.c: 127:             state = 5;
  1093     00D4  3005               	movlw	5
  1094     00D5  00F8               	movwf	taskAPP@state
  1095                           
  1096                           ;main.c: 128:             break;
  1097     00D6  2905               	goto	l108
  1098     00D7                     l1928:
  1099                           
  1100                           ;main.c: 130:             if(cnt++ > 1999)
  1101     00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1102     00D8  1303               	bcf	3,6	;RP1=0, select bank0
  1103     00D9  0826               	movf	taskAPP@cnt+1,w
  1104     00DA  00F7               	movwf	??_taskAPP+1
  1105     00DB  0825               	movf	taskAPP@cnt,w
  1106     00DC  00F6               	movwf	??_taskAPP
  1107     00DD  0AA5               	incf	taskAPP@cnt,f
  1108     00DE  1903               	skipnz
  1109     00DF  0AA6               	incf	taskAPP@cnt+1,f
  1110     00E0  3007               	movlw	7
  1111     00E1  0277               	subwf	??_taskAPP+1,w
  1112     00E2  30D0               	movlw	208
  1113     00E3  1903               	skipnz
  1114     00E4  0276               	subwf	??_taskAPP,w
  1115     00E5  1C03               	skipc
  1116     00E6  28E8               	goto	u951
  1117     00E7  28E9               	goto	u950
  1118     00E8                     u951:
  1119     00E8  2905               	goto	l108
  1120     00E9                     u950:
  1121     00E9                     l1930:
  1122                           
  1123                           ;main.c: 131:             {;main.c: 132:                 LCDWriteCMD(0x01);
  1124     00E9  3001               	movlw	1
  1125     00EA  120A  118A  2323  120A  118A  	fcall	_LCDWriteCMD
  1126     00EF                     l1932:
  1127                           
  1128                           ;main.c: 133:                 state = 0;
  1129     00EF  01F8               	clrf	taskAPP@state
  1130     00F0  2905               	goto	l108
  1131     00F1                     l1936:
  1132     00F1  0878               	movf	taskAPP@state,w
  1133                           
  1134                           ; Switch size 1, requested type "simple"
  1135                           ; Number of cases is 6, Range of values is 0 to 5
  1136                           ; switch strategies available:
  1137                           ; Name         Instructions Cycles
  1138                           ; simple_byte           19    10 (average)
  1139                           ; direct_byte           26     8 (fixed)
  1140                           ; jumptable            260     6 (fixed)
  1141                           ;	Chosen strategy is simple_byte
  1142     00F2  3A00               	xorlw	0	; case 0
  1143     00F3  1903               	skipnz
  1144     00F4  2827               	goto	l1882
  1145     00F5  3A01               	xorlw	1	; case 1
  1146     00F6  1903               	skipnz
  1147     00F7  2854               	goto	l1890
  1148     00F8  3A03               	xorlw	3	; case 2
  1149     00F9  1903               	skipnz
  1150     00FA  2886               	goto	l1904
  1151     00FB  3A01               	xorlw	1	; case 3
  1152     00FC  1903               	skipnz
  1153     00FD  28A0               	goto	l1914
  1154     00FE  3A07               	xorlw	7	; case 4
  1155     00FF  1903               	skipnz
  1156     0100  28AB               	goto	l1918
  1157     0101  3A01               	xorlw	1	; case 5
  1158     0102  1903               	skipnz
  1159     0103  28D7               	goto	l1928
  1160     0104  2905               	goto	l108
  1161     0105                     l108:
  1162     0105  0008               	return
  1163     0106                     __end_of_taskAPP:
  1164                           
  1165                           	psect	text3
  1166     0232                     __ptext3:	
  1167 ;; *************** function _strcmp *****************
  1168 ;; Defined at:
  1169 ;;		line 3 in file "/opt/microchip/xc8/v2.50/pic/sources/c99/common/strcmp.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;  l               1    2[COMMON] PTR const unsigned char 
  1172 ;;		 -> STR_3(5), 
  1173 ;;  r               1    3[COMMON] PTR const unsigned char 
  1174 ;;		 -> pass(5), 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  2    2[COMMON] int 
  1179 ;; Registers used:
  1180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1186 ;;      Params:         2       0       0       0       0
  1187 ;;      Locals:         0       0       0       0       0
  1188 ;;      Temps:          1       0       0       0       0
  1189 ;;      Totals:         3       0       0       0       0
  1190 ;;Total ram usage:        3 bytes
  1191 ;; Hardware stack levels used: 2
  1192 ;; Hardware stack levels required when called: 1
  1193 ;; This function calls:
  1194 ;;		Nothing
  1195 ;; This function is called by:
  1196 ;;		_taskAPP
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200     0232                     _strcmp:	
  1201                           ;psect for function _strcmp
  1202                           
  1203     0232                     l1794:	
  1204                           ;incstack = 0
  1205                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+pclath]
  1206                           
  1207     0232  2A37               	goto	l1798
  1208     0233                     l1796:
  1209     0233  3001               	movlw	1
  1210     0234  07F2               	addwf	strcmp@l,f
  1211     0235  3001               	movlw	1
  1212     0236  07F3               	addwf	strcmp@r,f
  1213     0237                     l1798:
  1214     0237  0873               	movf	strcmp@r,w
  1215     0238  0084               	movwf	4
  1216     0239  1383               	bcf	3,7	;select IRP bank0
  1217     023A  0800               	movf	0,w
  1218     023B  00F4               	movwf	??_strcmp
  1219     023C  0872               	movf	strcmp@l,w
  1220     023D  0084               	movwf	4
  1221     023E  120A  118A  2265  120A  118A  	fcall	stringdir
  1222     0243  0674               	xorwf	??_strcmp,w
  1223     0244  1D03               	skipz
  1224     0245  2A47               	goto	u871
  1225     0246  2A48               	goto	u870
  1226     0247                     u871:
  1227     0247  2A54               	goto	l1802
  1228     0248                     u870:
  1229     0248                     l1800:
  1230     0248  0872               	movf	strcmp@l,w
  1231     0249  0084               	movwf	4
  1232     024A  120A  118A  2265  120A  118A  	fcall	stringdir
  1233     024F  3A00               	xorlw	0
  1234     0250  1D03               	skipz
  1235     0251  2A53               	goto	u881
  1236     0252  2A54               	goto	u880
  1237     0253                     u881:
  1238     0253  2A33               	goto	l1796
  1239     0254                     u880:
  1240     0254                     l1802:
  1241     0254  0872               	movf	strcmp@l,w
  1242     0255  0084               	movwf	4
  1243     0256  120A  118A  2265  120A  118A  	fcall	stringdir
  1244     025B  00F4               	movwf	??_strcmp
  1245     025C  0873               	movf	strcmp@r,w
  1246     025D  0084               	movwf	4
  1247     025E  0800               	movf	0,w
  1248     025F  0274               	subwf	??_strcmp,w
  1249     0260  00F2               	movwf	?_strcmp
  1250     0261  01F3               	clrf	?_strcmp+1
  1251     0262  1C03               	skipc
  1252     0263  03F3               	decf	?_strcmp+1,f
  1253     0264                     l778:
  1254     0264  0008               	return
  1255     0265                     __end_of_strcmp:
  1256                           
  1257                           	psect	text4
  1258     0391                     __ptext4:	
  1259 ;; *************** function _LCDWriteMsg *****************
  1260 ;; Defined at:
  1261 ;;		line 153 in file "lcd.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;  str             1    4[COMMON] PTR unsigned char 
  1264 ;;		 -> STR_5(9), STR_4(10), STR_2(9), STR_1(10), 
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         1       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0
  1279 ;;      Totals:         1       0       0       0       0
  1280 ;;Total ram usage:        1 bytes
  1281 ;; Hardware stack levels used: 1
  1282 ;; Hardware stack levels required when called: 2
  1283 ;; This function calls:
  1284 ;;		_LCDWriteChar
  1285 ;; This function is called by:
  1286 ;;		_taskAPP
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290     0391                     _LCDWriteMsg:	
  1291                           ;psect for function _LCDWriteMsg
  1292                           
  1293     0391                     l1684:	
  1294                           ;incstack = 0
  1295                           ; Regs used in _LCDWriteMsg: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1296                           
  1297                           
  1298                           ;lcd.c: 153: void LCDWriteMsg(char *str);lcd.c: 154: {;lcd.c: 155:     while(*str)
  1299     0391  2BA0               	goto	l1690
  1300     0392                     l1686:
  1301                           
  1302                           ;lcd.c: 156:     {;lcd.c: 157:      LCDWriteChar(*str);
  1303     0392  0874               	movf	LCDWriteMsg@str,w
  1304     0393  0084               	movwf	4
  1305     0394  120A  118A  2265  120A  118A  	fcall	stringdir
  1306     0399  120A  118A  22F5  120A  118A  	fcall	_LCDWriteChar
  1307     039E                     l1688:
  1308                           
  1309                           ;lcd.c: 158:         str++;
  1310     039E  3001               	movlw	1
  1311     039F  07F4               	addwf	LCDWriteMsg@str,f
  1312     03A0                     l1690:
  1313                           
  1314                           ;lcd.c: 155:     while(*str)
  1315     03A0  0874               	movf	LCDWriteMsg@str,w
  1316     03A1  0084               	movwf	4
  1317     03A2  120A  118A  2265  120A  118A  	fcall	stringdir
  1318     03A7  3A00               	xorlw	0
  1319     03A8  1D03               	skipz
  1320     03A9  2BAB               	goto	u841
  1321     03AA  2BAC               	goto	u840
  1322     03AB                     u841:
  1323     03AB  2B92               	goto	l1686
  1324     03AC                     u840:
  1325     03AC                     l219:
  1326     03AC  0008               	return
  1327     03AD                     __end_of_LCDWriteMsg:
  1328                           
  1329                           	psect	text5
  1330     02F5                     __ptext5:	
  1331 ;; *************** function _LCDWriteChar *****************
  1332 ;; Defined at:
  1333 ;;		line 17 in file "lcd.c"
  1334 ;; Parameters:    Size  Location     Type
  1335 ;;  data            1    wreg     unsigned char 
  1336 ;; Auto vars:     Size  Location     Type
  1337 ;;  data            1    3[COMMON] unsigned char 
  1338 ;; Return value:  Size  Location     Type
  1339 ;;                  1    wreg      void 
  1340 ;; Registers used:
  1341 ;;		wreg, status,2, status,0
  1342 ;; Tracked objects:
  1343 ;;		On entry : 0/0
  1344 ;;		On exit  : 0/0
  1345 ;;		Unchanged: 0/0
  1346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1347 ;;      Params:         0       0       0       0       0
  1348 ;;      Locals:         1       0       0       0       0
  1349 ;;      Temps:          1       0       0       0       0
  1350 ;;      Totals:         2       0       0       0       0
  1351 ;;Total ram usage:        2 bytes
  1352 ;; Hardware stack levels used: 1
  1353 ;; Hardware stack levels required when called: 1
  1354 ;; This function calls:
  1355 ;;		Nothing
  1356 ;; This function is called by:
  1357 ;;		_taskAPP
  1358 ;;		_LCDWriteMsg
  1359 ;;		_LCDWriteNum
  1360 ;;		_LCDWriteMsgROM
  1361 ;; This function uses a non-reentrant model
  1362 ;;
  1363                           
  1364     02F5                     _LCDWriteChar:	
  1365                           ;psect for function _LCDWriteChar
  1366                           
  1367                           
  1368                           ;incstack = 0
  1369                           ; Regs used in _LCDWriteChar: [wreg+status,2+status,0]
  1370                           ;LCDWriteChar@data stored from wreg
  1371     02F5  00F3               	movwf	LCDWriteChar@data
  1372     02F6                     l1642:
  1373                           
  1374                           ;lcd.c: 17: void LCDWriteChar(char data);lcd.c: 18: {;lcd.c: 19:     PORTDbits.RD4 = 1;
  1375     02F6  1283               	bcf	3,5	;RP0=0, select bank0
  1376     02F7  1303               	bcf	3,6	;RP1=0, select bank0
  1377     02F8  1608               	bsf	8,4	;volatile
  1378     02F9                     l1644:
  1379                           
  1380                           ;lcd.c: 20:     TRISD &= 0xF0;
  1381     02F9  30F0               	movlw	240
  1382     02FA  1683               	bsf	3,5	;RP0=1, select bank1
  1383     02FB  1303               	bcf	3,6	;RP1=0, select bank1
  1384     02FC  0588               	andwf	8,f	;volatile
  1385                           
  1386                           ;lcd.c: 21:     PORTD &= 0xF0;
  1387     02FD  30F0               	movlw	240
  1388     02FE  1283               	bcf	3,5	;RP0=0, select bank0
  1389     02FF  1303               	bcf	3,6	;RP1=0, select bank0
  1390     0300  0588               	andwf	8,f	;volatile
  1391                           
  1392                           ;lcd.c: 25:     PORTD |= (data >> 4);
  1393     0301  0873               	movf	LCDWriteChar@data,w
  1394     0302  00F2               	movwf	??_LCDWriteChar
  1395     0303  3004               	movlw	4
  1396     0304                     u825:
  1397     0304  1003               	clrc
  1398     0305  0CF2               	rrf	??_LCDWriteChar,f
  1399     0306  3EFF               	addlw	-1
  1400     0307  1D03               	skipz
  1401     0308  2B04               	goto	u825
  1402     0309  0872               	movf	??_LCDWriteChar,w
  1403     030A  0488               	iorwf	8,f	;volatile
  1404     030B                     l1646:
  1405                           
  1406                           ;lcd.c: 27:     PORTDbits.RD5 = 1;
  1407     030B  1688               	bsf	8,5	;volatile
  1408     030C                     l1648:
  1409                           
  1410                           ;lcd.c: 28:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  1411     030C  2B0D               	nop2	;2 cycle nop
  1412     030D                     l1650:
  1413                           
  1414                           ;lcd.c: 29:     PORTDbits.RD5 = 0;
  1415     030D  1283               	bcf	3,5	;RP0=0, select bank0
  1416     030E  1303               	bcf	3,6	;RP1=0, select bank0
  1417     030F  1288               	bcf	8,5	;volatile
  1418                           
  1419                           ;lcd.c: 30:     PORTD &= 0xF0;
  1420     0310  30F0               	movlw	240
  1421     0311  0588               	andwf	8,f	;volatile
  1422                           
  1423                           ;lcd.c: 34:     PORTD |= data & ~(0xF0);
  1424     0312  0873               	movf	LCDWriteChar@data,w
  1425     0313  390F               	andlw	15
  1426     0314  0488               	iorwf	8,f	;volatile
  1427     0315                     l1652:
  1428                           
  1429                           ;lcd.c: 36:     PORTDbits.RD5 = 1;
  1430     0315  1688               	bsf	8,5	;volatile
  1431     0316                     l1654:
  1432                           
  1433                           ;lcd.c: 37:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  1434     0316  2B17               	nop2	;2 cycle nop
  1435     0317                     l1656:
  1436                           
  1437                           ;lcd.c: 38:     PORTDbits.RD5 = 0;
  1438     0317  1283               	bcf	3,5	;RP0=0, select bank0
  1439     0318  1303               	bcf	3,6	;RP1=0, select bank0
  1440     0319  1288               	bcf	8,5	;volatile
  1441                           
  1442                           ;lcd.c: 39:     TRISD |= ~0xF0;
  1443     031A  300F               	movlw	15
  1444     031B  1683               	bsf	3,5	;RP0=1, select bank1
  1445     031C  1303               	bcf	3,6	;RP1=0, select bank1
  1446     031D  0488               	iorwf	8,f	;volatile
  1447     031E                     l1658:
  1448                           
  1449                           ;lcd.c: 40:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1450     031E  3021               	movlw	33
  1451     031F  00F2               	movwf	??_LCDWriteChar
  1452     0320                     u1117:
  1453     0320  0BF2               	decfsz	??_LCDWriteChar,f
  1454     0321  2B20               	goto	u1117
  1455     0322                     l187:
  1456     0322  0008               	return
  1457     0323                     __end_of_LCDWriteChar:
  1458                           
  1459                           	psect	text6
  1460     01E7                     __ptext6:	
  1461 ;; *************** function _LCDGotoXY *****************
  1462 ;; Defined at:
  1463 ;;		line 114 in file "lcd.c"
  1464 ;; Parameters:    Size  Location     Type
  1465 ;;  col             1    wreg     unsigned char 
  1466 ;;  row             1    2[COMMON] unsigned char 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  col             1    4[COMMON] unsigned char 
  1469 ;;  DDaddr          1    5[COMMON] unsigned char 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      void 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1479 ;;      Params:         1       0       0       0       0
  1480 ;;      Locals:         2       0       0       0       0
  1481 ;;      Temps:          1       0       0       0       0
  1482 ;;      Totals:         4       0       0       0       0
  1483 ;;Total ram usage:        4 bytes
  1484 ;; Hardware stack levels used: 1
  1485 ;; Hardware stack levels required when called: 1
  1486 ;; This function calls:
  1487 ;;		Nothing
  1488 ;; This function is called by:
  1489 ;;		_taskAPP
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493     01E7                     _LCDGotoXY:	
  1494                           ;psect for function _LCDGotoXY
  1495                           
  1496                           
  1497                           ;incstack = 0
  1498                           ; Regs used in _LCDGotoXY: [wreg-fsr0h+status,2+status,0]
  1499                           ;LCDGotoXY@col stored from wreg
  1500     01E7  00F4               	movwf	LCDGotoXY@col
  1501     01E8                     l1660:
  1502                           
  1503                           ;lcd.c: 114: void LCDGotoXY(uint8_t col, uint8_t row);lcd.c: 115: {;lcd.c: 116:     uint
      +                          8_t DDaddr;;lcd.c: 117:     switch(row)
  1504     01E8  29F5               	goto	l1664
  1505     01E9                     l208:	
  1506                           ;lcd.c: 118:     {;lcd.c: 119:         case 0: DDaddr = 0x80; break;
  1507                           
  1508     01E9  3080               	movlw	128
  1509     01EA  00F5               	movwf	LCDGotoXY@DDaddr
  1510     01EB  2A03               	goto	l1666
  1511     01EC                     l210:	
  1512                           ;lcd.c: 120:         case 1: DDaddr = 0xC0; break;
  1513                           
  1514     01EC  30C0               	movlw	192
  1515     01ED  00F5               	movwf	LCDGotoXY@DDaddr
  1516     01EE  2A03               	goto	l1666
  1517     01EF                     l211:	
  1518                           ;lcd.c: 121:         case 2: DDaddr = 0x94; break;
  1519                           
  1520     01EF  3094               	movlw	148
  1521     01F0  00F5               	movwf	LCDGotoXY@DDaddr
  1522     01F1  2A03               	goto	l1666
  1523     01F2                     l212:	
  1524                           ;lcd.c: 122:         case 3: DDaddr = 0xD4; break;
  1525                           
  1526     01F2  30D4               	movlw	212
  1527     01F3  00F5               	movwf	LCDGotoXY@DDaddr
  1528     01F4  2A03               	goto	l1666
  1529     01F5                     l1664:
  1530     01F5  0872               	movf	LCDGotoXY@row,w
  1531                           
  1532                           ; Switch size 1, requested type "simple"
  1533                           ; Number of cases is 4, Range of values is 0 to 3
  1534                           ; switch strategies available:
  1535                           ; Name         Instructions Cycles
  1536                           ; simple_byte           13     7 (average)
  1537                           ; direct_byte           20     8 (fixed)
  1538                           ; jumptable            260     6 (fixed)
  1539                           ;	Chosen strategy is simple_byte
  1540     01F6  3A00               	xorlw	0	; case 0
  1541     01F7  1903               	skipnz
  1542     01F8  29E9               	goto	l208
  1543     01F9  3A01               	xorlw	1	; case 1
  1544     01FA  1903               	skipnz
  1545     01FB  29EC               	goto	l210
  1546     01FC  3A03               	xorlw	3	; case 2
  1547     01FD  1903               	skipnz
  1548     01FE  29EF               	goto	l211
  1549     01FF  3A01               	xorlw	1	; case 3
  1550     0200  1903               	skipnz
  1551     0201  29F2               	goto	l212
  1552     0202  2A03               	goto	l1666
  1553     0203                     l1666:
  1554                           
  1555                           ;lcd.c: 124:     DDaddr += col;
  1556     0203  0874               	movf	LCDGotoXY@col,w
  1557     0204  07F5               	addwf	LCDGotoXY@DDaddr,f
  1558     0205                     l1668:
  1559                           
  1560                           ;lcd.c: 125:     PORTDbits.RD4 = 0;
  1561     0205  1283               	bcf	3,5	;RP0=0, select bank0
  1562     0206  1303               	bcf	3,6	;RP1=0, select bank0
  1563     0207  1208               	bcf	8,4	;volatile
  1564                           
  1565                           ;lcd.c: 126:     TRISD &= 0xF0;
  1566     0208  30F0               	movlw	240
  1567     0209  1683               	bsf	3,5	;RP0=1, select bank1
  1568     020A  1303               	bcf	3,6	;RP1=0, select bank1
  1569     020B  0588               	andwf	8,f	;volatile
  1570                           
  1571                           ;lcd.c: 127:     PORTD &= 0xF0;
  1572     020C  30F0               	movlw	240
  1573     020D  1283               	bcf	3,5	;RP0=0, select bank0
  1574     020E  1303               	bcf	3,6	;RP1=0, select bank0
  1575     020F  0588               	andwf	8,f	;volatile
  1576                           
  1577                           ;lcd.c: 131:     PORTD |= (DDaddr >> 4);
  1578     0210  0875               	movf	LCDGotoXY@DDaddr,w
  1579     0211  00F3               	movwf	??_LCDGotoXY
  1580     0212  3004               	movlw	4
  1581     0213                     u835:
  1582     0213  1003               	clrc
  1583     0214  0CF3               	rrf	??_LCDGotoXY,f
  1584     0215  3EFF               	addlw	-1
  1585     0216  1D03               	skipz
  1586     0217  2A13               	goto	u835
  1587     0218  0873               	movf	??_LCDGotoXY,w
  1588     0219  0488               	iorwf	8,f	;volatile
  1589     021A                     l1670:
  1590                           
  1591                           ;lcd.c: 133:     PORTDbits.RD5 = 1;
  1592     021A  1688               	bsf	8,5	;volatile
  1593     021B                     l1672:
  1594                           
  1595                           ;lcd.c: 134:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  1596     021B  2A1C               	nop2	;2 cycle nop
  1597     021C                     l1674:
  1598                           
  1599                           ;lcd.c: 135:     PORTDbits.RD5 = 0;
  1600     021C  1283               	bcf	3,5	;RP0=0, select bank0
  1601     021D  1303               	bcf	3,6	;RP1=0, select bank0
  1602     021E  1288               	bcf	8,5	;volatile
  1603                           
  1604                           ;lcd.c: 136:     PORTD &= 0xF0;
  1605     021F  30F0               	movlw	240
  1606     0220  0588               	andwf	8,f	;volatile
  1607                           
  1608                           ;lcd.c: 140:     PORTD |= DDaddr & ~(0xF0);
  1609     0221  0875               	movf	LCDGotoXY@DDaddr,w
  1610     0222  390F               	andlw	15
  1611     0223  0488               	iorwf	8,f	;volatile
  1612     0224                     l1676:
  1613                           
  1614                           ;lcd.c: 142:     PORTDbits.RD5 = 1;
  1615     0224  1688               	bsf	8,5	;volatile
  1616     0225                     l1678:
  1617                           
  1618                           ;lcd.c: 143:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  1619     0225  2A26               	nop2	;2 cycle nop
  1620     0226                     l1680:
  1621                           
  1622                           ;lcd.c: 144:     PORTDbits.RD5 = 0;
  1623     0226  1283               	bcf	3,5	;RP0=0, select bank0
  1624     0227  1303               	bcf	3,6	;RP1=0, select bank0
  1625     0228  1288               	bcf	8,5	;volatile
  1626                           
  1627                           ;lcd.c: 145:     TRISD |= ~(0xF0);
  1628     0229  300F               	movlw	15
  1629     022A  1683               	bsf	3,5	;RP0=1, select bank1
  1630     022B  1303               	bcf	3,6	;RP1=0, select bank1
  1631     022C  0488               	iorwf	8,f	;volatile
  1632     022D                     l1682:
  1633                           
  1634                           ;lcd.c: 146:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1635     022D  3021               	movlw	33
  1636     022E  00F3               	movwf	??_LCDGotoXY
  1637     022F                     u1127:
  1638     022F  0BF3               	decfsz	??_LCDGotoXY,f
  1639     0230  2A2F               	goto	u1127
  1640     0231                     l213:
  1641     0231  0008               	return
  1642     0232                     __end_of_LCDGotoXY:
  1643                           
  1644                           	psect	text7
  1645     0296                     __ptext7:	
  1646 ;; *************** function _KBScan *****************
  1647 ;; Defined at:
  1648 ;;		line 26 in file "keypad.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;		None
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;  col             1    5[COMMON] unsigned char 
  1653 ;;  row             1    4[COMMON] unsigned char 
  1654 ;;  i               1    3[COMMON] unsigned char 
  1655 ;;  val             1    0        unsigned char 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      unsigned char 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2, status,0
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1665 ;;      Params:         0       0       0       0       0
  1666 ;;      Locals:         3       0       0       0       0
  1667 ;;      Temps:          1       0       0       0       0
  1668 ;;      Totals:         4       0       0       0       0
  1669 ;;Total ram usage:        4 bytes
  1670 ;; Hardware stack levels used: 1
  1671 ;; Hardware stack levels required when called: 1
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_taskAPP
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679     0296                     _KBScan:	
  1680                           ;psect for function _KBScan
  1681                           
  1682     0296                     l1692:	
  1683                           ;incstack = 0
  1684                           ; Regs used in _KBScan: [wreg+status,2+status,0]
  1685                           
  1686                           
  1687                           ;keypad.c: 28:  uint8_t i = 4, val;
  1688     0296  3004               	movlw	4
  1689     0297  00F3               	movwf	KBScan@i
  1690                           
  1691                           ;keypad.c: 29:  uint8_t row, col = 0b11110111;
  1692     0298  30F7               	movlw	247
  1693     0299  00F5               	movwf	KBScan@col
  1694                           
  1695                           ;keypad.c: 30:  while(i--)
  1696     029A  2ABA               	goto	l126
  1697     029B                     l1694:
  1698                           
  1699                           ;keypad.c: 31:  {;keypad.c: 32:   PORTB = col;
  1700     029B  0875               	movf	KBScan@col,w
  1701     029C  1283               	bcf	3,5	;RP0=0, select bank0
  1702     029D  1303               	bcf	3,6	;RP1=0, select bank0
  1703     029E  0086               	movwf	6	;volatile
  1704     029F                     l1696:
  1705                           
  1706                           ;keypad.c: 33:   __nop();
  1707     029F  0000               	nop
  1708     02A0                     l1698:
  1709                           
  1710                           ;keypad.c: 34:   if((PORTB & 0xF0) != 0xF0)
  1711     02A0  30F0               	movlw	240
  1712     02A1  1283               	bcf	3,5	;RP0=0, select bank0
  1713     02A2  1303               	bcf	3,6	;RP1=0, select bank0
  1714     02A3  0506               	andwf	6,w	;volatile
  1715     02A4  00F2               	movwf	??_KBScan
  1716     02A5  30F0               	movlw	240
  1717     02A6  0672               	xorwf	??_KBScan,w
  1718     02A7  1903               	btfsc	3,2
  1719     02A8  2AAA               	goto	u851
  1720     02A9  2AAB               	goto	u850
  1721     02AA                     u851:
  1722     02AA  2AB5               	goto	l1712
  1723     02AB                     u850:
  1724     02AB                     l1700:
  1725                           
  1726                           ;keypad.c: 35:   {;keypad.c: 36:    row = (PORTB) & 0xF0;
  1727     02AB  0806               	movf	6,w	;volatile
  1728     02AC  00F4               	movwf	KBScan@row
  1729     02AD                     l1702:
  1730     02AD  30F0               	movlw	240
  1731     02AE  05F4               	andwf	KBScan@row,f
  1732     02AF                     l1704:
  1733                           
  1734                           ;keypad.c: 37:    col = (col) & 0x0F;
  1735     02AF  300F               	movlw	15
  1736     02B0  05F5               	andwf	KBScan@col,f
  1737     02B1                     l1706:
  1738                           
  1739                           ;keypad.c: 39:             PORTB = 0x00;
  1740     02B1  0186               	clrf	6	;volatile
  1741     02B2                     l1708:
  1742                           
  1743                           ;keypad.c: 40:             return (row|col);
  1744     02B2  0874               	movf	KBScan@row,w
  1745     02B3  0475               	iorwf	KBScan@col,w
  1746     02B4  2AC5               	goto	l129
  1747     02B5                     l1712:
  1748                           
  1749                           ;keypad.c: 42:   col = col >> 1;
  1750     02B5  0875               	movf	KBScan@col,w
  1751     02B6  00F2               	movwf	??_KBScan
  1752     02B7  1003               	clrc
  1753     02B8  0C72               	rrf	??_KBScan,w
  1754     02B9  00F5               	movwf	KBScan@col
  1755     02BA                     l126:	
  1756                           ;keypad.c: 43:  }
  1757                           
  1758                           
  1759                           ;keypad.c: 30:  while(i--)
  1760     02BA  3001               	movlw	1
  1761     02BB  02F3               	subwf	KBScan@i,f
  1762     02BC  0A73               	incf	KBScan@i,w
  1763     02BD  1D03               	btfss	3,2
  1764     02BE  2AC0               	goto	u861
  1765     02BF  2AC1               	goto	u860
  1766     02C0                     u861:
  1767     02C0  2A9B               	goto	l1694
  1768     02C1                     u860:
  1769     02C1                     l1714:
  1770                           
  1771                           ;keypad.c: 44:     PORTB = 0x00;
  1772     02C1  1283               	bcf	3,5	;RP0=0, select bank0
  1773     02C2  1303               	bcf	3,6	;RP1=0, select bank0
  1774     02C3  0186               	clrf	6	;volatile
  1775     02C4                     l1716:
  1776                           
  1777                           ;keypad.c: 45:  return 0;
  1778     02C4  3000               	movlw	0
  1779     02C5                     l129:
  1780     02C5  0008               	return
  1781     02C6                     __end_of_KBScan:
  1782                           
  1783                           	psect	text8
  1784     0190                     __ptext8:	
  1785 ;; *************** function _KBGetChar *****************
  1786 ;; Defined at:
  1787 ;;		line 52 in file "keypad.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  n               1    wreg     unsigned char 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  n               1    2[COMMON] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      unsigned char 
  1794 ;; Registers used:
  1795 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1801 ;;      Params:         0       0       0       0       0
  1802 ;;      Locals:         1       0       0       0       0
  1803 ;;      Temps:          0       0       0       0       0
  1804 ;;      Totals:         1       0       0       0       0
  1805 ;;Total ram usage:        1 bytes
  1806 ;; Hardware stack levels used: 1
  1807 ;; Hardware stack levels required when called: 1
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_taskAPP
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815     0190                     _KBGetChar:	
  1816                           ;psect for function _KBGetChar
  1817                           
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _KBGetChar: [wreg-fsr0h+status,2+status,0]
  1821                           ;KBGetChar@n stored from wreg
  1822     0190  00F2               	movwf	KBGetChar@n
  1823     0191                     l1720:
  1824                           
  1825                           ;keypad.c: 52: uint8_t KBGetChar(uint8_t n);keypad.c: 53: {;keypad.c: 54:  switch(n)
  1826     0191  29B4               	goto	l1792
  1827     0192                     l1722:
  1828     0192  3044               	movlw	68
  1829     0193  29E6               	goto	l135
  1830     0194                     l1726:
  1831     0194  3023               	movlw	35
  1832     0195  29E6               	goto	l135
  1833     0196                     l1730:
  1834     0196  3030               	movlw	48
  1835     0197  29E6               	goto	l135
  1836     0198                     l1734:
  1837     0198  302A               	movlw	42
  1838     0199  29E6               	goto	l135
  1839     019A                     l1738:
  1840     019A  3043               	movlw	67
  1841     019B  29E6               	goto	l135
  1842     019C                     l1742:
  1843     019C  3039               	movlw	57
  1844     019D  29E6               	goto	l135
  1845     019E                     l1746:
  1846     019E  3038               	movlw	56
  1847     019F  29E6               	goto	l135
  1848     01A0                     l1750:
  1849     01A0  3037               	movlw	55
  1850     01A1  29E6               	goto	l135
  1851     01A2                     l1754:
  1852     01A2  3042               	movlw	66
  1853     01A3  29E6               	goto	l135
  1854     01A4                     l1758:
  1855     01A4  3036               	movlw	54
  1856     01A5  29E6               	goto	l135
  1857     01A6                     l1762:
  1858     01A6  3035               	movlw	53
  1859     01A7  29E6               	goto	l135
  1860     01A8                     l1766:
  1861     01A8  3034               	movlw	52
  1862     01A9  29E6               	goto	l135
  1863     01AA                     l1770:
  1864     01AA  3041               	movlw	65
  1865     01AB  29E6               	goto	l135
  1866     01AC                     l1774:
  1867     01AC  3033               	movlw	51
  1868     01AD  29E6               	goto	l135
  1869     01AE                     l1778:
  1870     01AE  3032               	movlw	50
  1871     01AF  29E6               	goto	l135
  1872     01B0                     l1782:
  1873     01B0  3031               	movlw	49
  1874     01B1  29E6               	goto	l135
  1875     01B2                     l1786:
  1876     01B2  303F               	movlw	63
  1877     01B3  29E6               	goto	l135
  1878     01B4                     l1792:
  1879     01B4  0872               	movf	KBGetChar@n,w
  1880                           
  1881                           ; Switch size 1, requested type "simple"
  1882                           ; Number of cases is 16, Range of values is 119 to 238
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte           49    25 (average)
  1886                           ; jumptable            263     9 (fixed)
  1887                           ;	Chosen strategy is simple_byte
  1888     01B5  3A77               	xorlw	119	; case 119
  1889     01B6  1903               	skipnz
  1890     01B7  29B0               	goto	l1782
  1891     01B8  3A0C               	xorlw	12	; case 123
  1892     01B9  1903               	skipnz
  1893     01BA  29AE               	goto	l1778
  1894     01BB  3A06               	xorlw	6	; case 125
  1895     01BC  1903               	skipnz
  1896     01BD  29AC               	goto	l1774
  1897     01BE  3A03               	xorlw	3	; case 126
  1898     01BF  1903               	skipnz
  1899     01C0  29AA               	goto	l1770
  1900     01C1  3AC9               	xorlw	201	; case 183
  1901     01C2  1903               	skipnz
  1902     01C3  29A8               	goto	l1766
  1903     01C4  3A0C               	xorlw	12	; case 187
  1904     01C5  1903               	skipnz
  1905     01C6  29A6               	goto	l1762
  1906     01C7  3A06               	xorlw	6	; case 189
  1907     01C8  1903               	skipnz
  1908     01C9  29A4               	goto	l1758
  1909     01CA  3A03               	xorlw	3	; case 190
  1910     01CB  1903               	skipnz
  1911     01CC  29A2               	goto	l1754
  1912     01CD  3A69               	xorlw	105	; case 215
  1913     01CE  1903               	skipnz
  1914     01CF  29A0               	goto	l1750
  1915     01D0  3A0C               	xorlw	12	; case 219
  1916     01D1  1903               	skipnz
  1917     01D2  299E               	goto	l1746
  1918     01D3  3A06               	xorlw	6	; case 221
  1919     01D4  1903               	skipnz
  1920     01D5  299C               	goto	l1742
  1921     01D6  3A03               	xorlw	3	; case 222
  1922     01D7  1903               	skipnz
  1923     01D8  299A               	goto	l1738
  1924     01D9  3A39               	xorlw	57	; case 231
  1925     01DA  1903               	skipnz
  1926     01DB  2998               	goto	l1734
  1927     01DC  3A0C               	xorlw	12	; case 235
  1928     01DD  1903               	skipnz
  1929     01DE  2996               	goto	l1730
  1930     01DF  3A06               	xorlw	6	; case 237
  1931     01E0  1903               	skipnz
  1932     01E1  2994               	goto	l1726
  1933     01E2  3A03               	xorlw	3	; case 238
  1934     01E3  1903               	skipnz
  1935     01E4  2992               	goto	l1722
  1936     01E5  29B2               	goto	l1786
  1937     01E6                     l135:
  1938     01E6  0008               	return
  1939     01E7                     __end_of_KBGetChar:
  1940                           
  1941                           	psect	text9
  1942     02C6                     __ptext9:	
  1943 ;; *************** function _setupMCU *****************
  1944 ;; Defined at:
  1945 ;;		line 44 in file "main.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;		None
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1959 ;;      Params:         0       0       0       0       0
  1960 ;;      Locals:         0       0       0       0       0
  1961 ;;      Temps:          0       0       0       0       0
  1962 ;;      Totals:         0       0       0       0       0
  1963 ;;Total ram usage:        0 bytes
  1964 ;; Hardware stack levels used: 1
  1965 ;; Hardware stack levels required when called: 1
  1966 ;; This function calls:
  1967 ;;		Nothing
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973     02C6                     _setupMCU:	
  1974                           ;psect for function _setupMCU
  1975                           
  1976     02C6                     l962:	
  1977                           ;incstack = 0
  1978                           ; Regs used in _setupMCU: [wreg+status,2+status,0]
  1979                           
  1980                           
  1981                           ;main.c: 46:     OSCCONbits.IRCF = 0b111;
  1982     02C6  3070               	movlw	112
  1983     02C7  1683               	bsf	3,5	;RP0=1, select bank1
  1984     02C8  1303               	bcf	3,6	;RP1=0, select bank1
  1985     02C9  048F               	iorwf	15,f	;volatile
  1986     02CA                     l72:	
  1987                           ;main.c: 47:     while(OSCCONbits.HTS == 0);
  1988                           
  1989     02CA  1D0F               	btfss	15,2	;volatile
  1990     02CB  2ACD               	goto	u91
  1991     02CC  2ACE               	goto	u90
  1992     02CD                     u91:
  1993     02CD  2ACA               	goto	l72
  1994     02CE                     u90:
  1995     02CE                     l964:
  1996                           
  1997                           ;main.c: 48:     ANSEL = 0;
  1998     02CE  1683               	bsf	3,5	;RP0=1, select bank3
  1999     02CF  1703               	bsf	3,6	;RP1=1, select bank3
  2000     02D0  0188               	clrf	8	;volatile
  2001                           
  2002                           ;main.c: 49:     ANSELH = 0;
  2003     02D1  0189               	clrf	9	;volatile
  2004     02D2                     l966:
  2005                           
  2006                           ;main.c: 50:     TRISEbits.TRISE2 = 0;
  2007     02D2  1683               	bsf	3,5	;RP0=1, select bank1
  2008     02D3  1303               	bcf	3,6	;RP1=0, select bank1
  2009     02D4  1109               	bcf	9,2	;volatile
  2010     02D5                     l968:
  2011                           
  2012                           ;main.c: 51:     PORTEbits.RE2 = 0;
  2013     02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2014     02D6  1303               	bcf	3,6	;RP1=0, select bank0
  2015     02D7  1109               	bcf	9,2	;volatile
  2016     02D8                     l970:
  2017                           
  2018                           ;main.c: 52:     OPTION_REGbits.nRBPU = 0;
  2019     02D8  1683               	bsf	3,5	;RP0=1, select bank1
  2020     02D9  1303               	bcf	3,6	;RP1=0, select bank1
  2021     02DA  1381               	bcf	1,7	;volatile
  2022     02DB                     l972:
  2023                           
  2024                           ;main.c: 54:     OPTION_REGbits.T0CS = 0;
  2025     02DB  1281               	bcf	1,5	;volatile
  2026     02DC                     l974:
  2027                           
  2028                           ;main.c: 55:     OPTION_REGbits.PSA = 0;
  2029     02DC  1181               	bcf	1,3	;volatile
  2030     02DD                     l976:
  2031                           
  2032                           ;main.c: 56:     OPTION_REGbits.PS = 0b011;
  2033     02DD  0801               	movf	1,w	;volatile
  2034     02DE  39F8               	andlw	-8
  2035     02DF  3803               	iorlw	3
  2036     02E0  0081               	movwf	1	;volatile
  2037     02E1                     l978:
  2038                           
  2039                           ;main.c: 57:     TMR0 = 131;
  2040     02E1  3083               	movlw	131
  2041     02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2042     02E3  1303               	bcf	3,6	;RP1=0, select bank0
  2043     02E4  0081               	movwf	1	;volatile
  2044     02E5                     l980:
  2045                           
  2046                           ;main.c: 58:     INTCONbits.T0IF = 0;
  2047     02E5  110B               	bcf	11,2	;volatile
  2048     02E6                     l982:
  2049                           
  2050                           ;main.c: 59:     INTCONbits.T0IE = 1;
  2051     02E6  168B               	bsf	11,5	;volatile
  2052     02E7                     l984:
  2053                           
  2054                           ;main.c: 61:     TXSTAbits.BRGH = 1;
  2055     02E7  1683               	bsf	3,5	;RP0=1, select bank1
  2056     02E8  1303               	bcf	3,6	;RP1=0, select bank1
  2057     02E9  1518               	bsf	24,2	;volatile
  2058     02EA                     l986:
  2059                           
  2060                           ;main.c: 62:     TXSTAbits.TXEN = 1;
  2061     02EA  1698               	bsf	24,5	;volatile
  2062     02EB                     l988:
  2063                           
  2064                           ;main.c: 63:     RCSTAbits.CREN = 0;
  2065     02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2066     02EC  1303               	bcf	3,6	;RP1=0, select bank0
  2067     02ED  1218               	bcf	24,4	;volatile
  2068     02EE                     l990:
  2069                           
  2070                           ;main.c: 64:     RCSTAbits.SPEN = 1;
  2071     02EE  1798               	bsf	24,7	;volatile
  2072     02EF                     l992:
  2073                           
  2074                           ;main.c: 65:     SPBRG = 51;
  2075     02EF  3033               	movlw	51
  2076     02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2077     02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2078     02F2  0099               	movwf	25	;volatile
  2079     02F3                     l994:
  2080                           
  2081                           ;main.c: 67:     INTCONbits.GIE = 1;
  2082     02F3  178B               	bsf	11,7	;volatile
  2083     02F4                     l75:
  2084     02F4  0008               	return
  2085     02F5                     __end_of_setupMCU:
  2086                           
  2087                           	psect	text10
  2088     0106                     __ptext10:	
  2089 ;; *************** function _LCDSetup *****************
  2090 ;; Defined at:
  2091 ;;		line 180 in file "lcd.c"
  2092 ;; Parameters:    Size  Location     Type
  2093 ;;		None
  2094 ;; Auto vars:     Size  Location     Type
  2095 ;;		None
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, status,2, status,0, pclath, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2105 ;;      Params:         0       0       0       0       0
  2106 ;;      Locals:         0       0       0       0       0
  2107 ;;      Temps:          2       0       0       0       0
  2108 ;;      Totals:         2       0       0       0       0
  2109 ;;Total ram usage:        2 bytes
  2110 ;; Hardware stack levels used: 1
  2111 ;; Hardware stack levels required when called: 2
  2112 ;; This function calls:
  2113 ;;		_LCDWriteCMD
  2114 ;; This function is called by:
  2115 ;;		_main
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119     0106                     _LCDSetup:	
  2120                           ;psect for function _LCDSetup
  2121                           
  2122     0106                     l1824:	
  2123                           ;incstack = 0
  2124                           ; Regs used in _LCDSetup: [wreg+status,2+status,0+pclath+cstack]
  2125                           
  2126                           
  2127                           ;lcd.c: 182:     TRISDbits.TRISD5 = 0;
  2128     0106  1683               	bsf	3,5	;RP0=1, select bank1
  2129     0107  1303               	bcf	3,6	;RP1=0, select bank1
  2130     0108  1288               	bcf	8,5	;volatile
  2131                           
  2132                           ;lcd.c: 183:     TRISDbits.TRISD4 = 0;
  2133     0109  1208               	bcf	8,4	;volatile
  2134                           
  2135                           ;lcd.c: 184:     PORTDbits.RD4 = 0;
  2136     010A  1283               	bcf	3,5	;RP0=0, select bank0
  2137     010B  1303               	bcf	3,6	;RP1=0, select bank0
  2138     010C  1208               	bcf	8,4	;volatile
  2139                           
  2140                           ;lcd.c: 185:     PORTDbits.RD5 = 0;
  2141     010D  1288               	bcf	8,5	;volatile
  2142     010E                     l1826:
  2143                           
  2144                           ;lcd.c: 186:     _delay((unsigned long)((5000)*(8000000/4000000.0)));
  2145     010E  300D               	movlw	13
  2146     010F  00F5               	movwf	??_LCDSetup+1
  2147     0110  30FB               	movlw	251
  2148     0111  00F4               	movwf	??_LCDSetup
  2149     0112                     u1137:
  2150     0112  0BF4               	decfsz	??_LCDSetup,f
  2151     0113  2912               	goto	u1137
  2152     0114  0BF5               	decfsz	??_LCDSetup+1,f
  2153     0115  2912               	goto	u1137
  2154     0116  2917               	nop2
  2155                           
  2156                           ;lcd.c: 187:     _delay((unsigned long)((5000)*(8000000/4000000.0)));
  2157     0117  300D               	movlw	13
  2158     0118  00F5               	movwf	??_LCDSetup+1
  2159     0119  30FB               	movlw	251
  2160     011A  00F4               	movwf	??_LCDSetup
  2161     011B                     u1147:
  2162     011B  0BF4               	decfsz	??_LCDSetup,f
  2163     011C  291B               	goto	u1147
  2164     011D  0BF5               	decfsz	??_LCDSetup+1,f
  2165     011E  291B               	goto	u1147
  2166     011F  2920               	nop2
  2167                           
  2168                           ;lcd.c: 188:     _delay((unsigned long)((5000)*(8000000/4000000.0)));
  2169     0120  300D               	movlw	13
  2170     0121  00F5               	movwf	??_LCDSetup+1
  2171     0122  30FB               	movlw	251
  2172     0123  00F4               	movwf	??_LCDSetup
  2173     0124                     u1157:
  2174     0124  0BF4               	decfsz	??_LCDSetup,f
  2175     0125  2924               	goto	u1157
  2176     0126  0BF5               	decfsz	??_LCDSetup+1,f
  2177     0127  2924               	goto	u1157
  2178     0128  2929               	nop2
  2179     0129                     l1828:
  2180                           
  2181                           ;lcd.c: 189:     TRISD &= 0xF0;
  2182     0129  30F0               	movlw	240
  2183     012A  1683               	bsf	3,5	;RP0=1, select bank1
  2184     012B  1303               	bcf	3,6	;RP1=0, select bank1
  2185     012C  0588               	andwf	8,f	;volatile
  2186     012D                     l1830:
  2187                           
  2188                           ;lcd.c: 190:     PORTD &= 0xF0;
  2189     012D  30F0               	movlw	240
  2190     012E  1283               	bcf	3,5	;RP0=0, select bank0
  2191     012F  1303               	bcf	3,6	;RP1=0, select bank0
  2192     0130  0588               	andwf	8,f	;volatile
  2193     0131                     l1832:
  2194                           
  2195                           ;lcd.c: 194:     PORTD |= 0b00000011;
  2196     0131  3003               	movlw	3
  2197     0132  0488               	iorwf	8,f	;volatile
  2198     0133                     l1834:
  2199                           
  2200                           ;lcd.c: 196:     PORTDbits.RD5 = 1;
  2201     0133  1688               	bsf	8,5	;volatile
  2202     0134                     l1836:
  2203                           
  2204                           ;lcd.c: 197:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2205     0134  2935               	nop2	;2 cycle nop
  2206     0135                     l1838:
  2207                           
  2208                           ;lcd.c: 198:     PORTDbits.RD5 = 0;
  2209     0135  1283               	bcf	3,5	;RP0=0, select bank0
  2210     0136  1303               	bcf	3,6	;RP1=0, select bank0
  2211     0137  1288               	bcf	8,5	;volatile
  2212     0138                     l1840:
  2213                           
  2214                           ;lcd.c: 199:     _delay((unsigned long)((5000)*(8000000/4000000.0)));
  2215     0138  300D               	movlw	13
  2216     0139  00F5               	movwf	??_LCDSetup+1
  2217     013A  30FB               	movlw	251
  2218     013B  00F4               	movwf	??_LCDSetup
  2219     013C                     u1167:
  2220     013C  0BF4               	decfsz	??_LCDSetup,f
  2221     013D  293C               	goto	u1167
  2222     013E  0BF5               	decfsz	??_LCDSetup+1,f
  2223     013F  293C               	goto	u1167
  2224     0140  2941               	nop2
  2225                           
  2226                           ;lcd.c: 200:     PORTD &= 0xF0;
  2227     0141  30F0               	movlw	240
  2228     0142  1283               	bcf	3,5	;RP0=0, select bank0
  2229     0143  1303               	bcf	3,6	;RP1=0, select bank0
  2230     0144  0588               	andwf	8,f	;volatile
  2231                           
  2232                           ;lcd.c: 204:     PORTD |= 0b00000011;
  2233     0145  3003               	movlw	3
  2234     0146  0488               	iorwf	8,f	;volatile
  2235     0147                     l1842:
  2236                           
  2237                           ;lcd.c: 206:     PORTDbits.RD5 = 1;
  2238     0147  1688               	bsf	8,5	;volatile
  2239     0148                     l1844:
  2240                           
  2241                           ;lcd.c: 207:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2242     0148  2949               	nop2	;2 cycle nop
  2243     0149                     l1846:
  2244                           
  2245                           ;lcd.c: 208:     PORTDbits.RD5 = 0;
  2246     0149  1283               	bcf	3,5	;RP0=0, select bank0
  2247     014A  1303               	bcf	3,6	;RP1=0, select bank0
  2248     014B  1288               	bcf	8,5	;volatile
  2249     014C                     l1848:
  2250                           
  2251                           ;lcd.c: 209:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2252     014C  3021               	movlw	33
  2253     014D  00F4               	movwf	??_LCDSetup
  2254     014E                     u1177:
  2255     014E  0BF4               	decfsz	??_LCDSetup,f
  2256     014F  294E               	goto	u1177
  2257     0150                     l1850:
  2258                           
  2259                           ;lcd.c: 210:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2260     0150  3021               	movlw	33
  2261     0151  00F4               	movwf	??_LCDSetup
  2262     0152                     u1187:
  2263     0152  0BF4               	decfsz	??_LCDSetup,f
  2264     0153  2952               	goto	u1187
  2265                           
  2266                           ;lcd.c: 211:     PORTD &= 0xF0;
  2267     0154  30F0               	movlw	240
  2268     0155  1283               	bcf	3,5	;RP0=0, select bank0
  2269     0156  1303               	bcf	3,6	;RP1=0, select bank0
  2270     0157  0588               	andwf	8,f	;volatile
  2271                           
  2272                           ;lcd.c: 215:     PORTD |= 0b00000011;
  2273     0158  3003               	movlw	3
  2274     0159  0488               	iorwf	8,f	;volatile
  2275     015A                     l1852:
  2276                           
  2277                           ;lcd.c: 217:     PORTDbits.RD5 = 1;
  2278     015A  1688               	bsf	8,5	;volatile
  2279     015B                     l1854:
  2280                           
  2281                           ;lcd.c: 218:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2282     015B  295C               	nop2	;2 cycle nop
  2283     015C                     l1856:
  2284                           
  2285                           ;lcd.c: 219:     PORTDbits.RD5 = 0;
  2286     015C  1283               	bcf	3,5	;RP0=0, select bank0
  2287     015D  1303               	bcf	3,6	;RP1=0, select bank0
  2288     015E  1288               	bcf	8,5	;volatile
  2289     015F                     l1858:
  2290                           
  2291                           ;lcd.c: 220:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2292     015F  3021               	movlw	33
  2293     0160  00F4               	movwf	??_LCDSetup
  2294     0161                     u1197:
  2295     0161  0BF4               	decfsz	??_LCDSetup,f
  2296     0162  2961               	goto	u1197
  2297     0163                     l1860:
  2298                           
  2299                           ;lcd.c: 222:     PORTD &= 0xF0;
  2300     0163  30F0               	movlw	240
  2301     0164  1283               	bcf	3,5	;RP0=0, select bank0
  2302     0165  1303               	bcf	3,6	;RP1=0, select bank0
  2303     0166  0588               	andwf	8,f	;volatile
  2304     0167                     l1862:
  2305                           
  2306                           ;lcd.c: 226:     PORTD |= 0b00000010;
  2307     0167  1488               	bsf	8,1	;volatile
  2308     0168                     l1864:
  2309                           
  2310                           ;lcd.c: 228:     PORTDbits.RD5 = 1;
  2311     0168  1688               	bsf	8,5	;volatile
  2312     0169                     l1866:
  2313                           
  2314                           ;lcd.c: 229:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2315     0169  296A               	nop2	;2 cycle nop
  2316     016A                     l1868:
  2317                           
  2318                           ;lcd.c: 230:     PORTDbits.RD5 = 0;
  2319     016A  1283               	bcf	3,5	;RP0=0, select bank0
  2320     016B  1303               	bcf	3,6	;RP1=0, select bank0
  2321     016C  1288               	bcf	8,5	;volatile
  2322                           
  2323                           ;lcd.c: 231:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2324     016D  3021               	movlw	33
  2325     016E  00F4               	movwf	??_LCDSetup
  2326     016F                     u1207:
  2327     016F  0BF4               	decfsz	??_LCDSetup,f
  2328     0170  296F               	goto	u1207
  2329     0171                     l1870:
  2330                           
  2331                           ;lcd.c: 233:     LCDWriteCMD(0x3F & 0x2F);
  2332     0171  302F               	movlw	47
  2333     0172  120A  118A  2323  120A  118A  	fcall	_LCDWriteCMD
  2334     0177                     l1872:
  2335                           
  2336                           ;lcd.c: 234:     LCDWriteCMD(0x0F & 0x0E);
  2337     0177  300E               	movlw	14
  2338     0178  120A  118A  2323  120A  118A  	fcall	_LCDWriteCMD
  2339     017D                     l1874:
  2340                           
  2341                           ;lcd.c: 235:     LCDWriteCMD(0x07 & 0x06);
  2342     017D  3006               	movlw	6
  2343     017E  120A  118A  2323  120A  118A  	fcall	_LCDWriteCMD
  2344     0183                     l1876:
  2345                           
  2346                           ;lcd.c: 236:     LCDWriteCMD(0x01);
  2347     0183  3001               	movlw	1
  2348     0184  120A  118A  2323  120A  118A  	fcall	_LCDWriteCMD
  2349     0189                     l1878:
  2350                           
  2351                           ;lcd.c: 237:     LCDWriteCMD(0x02);
  2352     0189  3002               	movlw	2
  2353     018A  120A  118A  2323  120A  118A  	fcall	_LCDWriteCMD
  2354     018F                     l228:
  2355     018F  0008               	return
  2356     0190                     __end_of_LCDSetup:
  2357                           
  2358                           	psect	text11
  2359     0323                     __ptext11:	
  2360 ;; *************** function _LCDWriteCMD *****************
  2361 ;; Defined at:
  2362 ;;		line 84 in file "lcd.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;  cmd             1    wreg     unsigned char 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;  cmd             1    3[COMMON] unsigned char 
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      void 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2376 ;;      Params:         0       0       0       0       0
  2377 ;;      Locals:         1       0       0       0       0
  2378 ;;      Temps:          1       0       0       0       0
  2379 ;;      Totals:         2       0       0       0       0
  2380 ;;Total ram usage:        2 bytes
  2381 ;; Hardware stack levels used: 1
  2382 ;; Hardware stack levels required when called: 1
  2383 ;; This function calls:
  2384 ;;		Nothing
  2385 ;; This function is called by:
  2386 ;;		_taskAPP
  2387 ;;		_LCDSetup
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391     0323                     _LCDWriteCMD:	
  2392                           ;psect for function _LCDWriteCMD
  2393                           
  2394                           
  2395                           ;incstack = 0
  2396                           ; Regs used in _LCDWriteCMD: [wreg+status,2+status,0]
  2397                           ;LCDWriteCMD@cmd stored from wreg
  2398     0323  00F3               	movwf	LCDWriteCMD@cmd
  2399     0324                     l1806:
  2400                           
  2401                           ;lcd.c: 84: void LCDWriteCMD(uint8_t cmd);lcd.c: 85: {;lcd.c: 86:     PORTDbits.RD4 = 0;
  2402     0324  1283               	bcf	3,5	;RP0=0, select bank0
  2403     0325  1303               	bcf	3,6	;RP1=0, select bank0
  2404     0326  1208               	bcf	8,4	;volatile
  2405     0327                     l1808:
  2406                           
  2407                           ;lcd.c: 87:     TRISD &= 0xF0;
  2408     0327  30F0               	movlw	240
  2409     0328  1683               	bsf	3,5	;RP0=1, select bank1
  2410     0329  1303               	bcf	3,6	;RP1=0, select bank1
  2411     032A  0588               	andwf	8,f	;volatile
  2412                           
  2413                           ;lcd.c: 88:     PORTD &= 0xF0;
  2414     032B  30F0               	movlw	240
  2415     032C  1283               	bcf	3,5	;RP0=0, select bank0
  2416     032D  1303               	bcf	3,6	;RP1=0, select bank0
  2417     032E  0588               	andwf	8,f	;volatile
  2418                           
  2419                           ;lcd.c: 92:     PORTD |= (cmd >> 4);
  2420     032F  0873               	movf	LCDWriteCMD@cmd,w
  2421     0330  00F2               	movwf	??_LCDWriteCMD
  2422     0331  3004               	movlw	4
  2423     0332                     u895:
  2424     0332  1003               	clrc
  2425     0333  0CF2               	rrf	??_LCDWriteCMD,f
  2426     0334  3EFF               	addlw	-1
  2427     0335  1D03               	skipz
  2428     0336  2B32               	goto	u895
  2429     0337  0872               	movf	??_LCDWriteCMD,w
  2430     0338  0488               	iorwf	8,f	;volatile
  2431     0339                     l1810:
  2432                           
  2433                           ;lcd.c: 94:     PORTDbits.RD5 = 1;
  2434     0339  1688               	bsf	8,5	;volatile
  2435     033A                     l1812:
  2436                           
  2437                           ;lcd.c: 95:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2438     033A  2B3B               	nop2	;2 cycle nop
  2439     033B                     l1814:
  2440                           
  2441                           ;lcd.c: 96:     PORTDbits.RD5 = 0;
  2442     033B  1283               	bcf	3,5	;RP0=0, select bank0
  2443     033C  1303               	bcf	3,6	;RP1=0, select bank0
  2444     033D  1288               	bcf	8,5	;volatile
  2445                           
  2446                           ;lcd.c: 97:     PORTD &= 0xF0;
  2447     033E  30F0               	movlw	240
  2448     033F  0588               	andwf	8,f	;volatile
  2449                           
  2450                           ;lcd.c: 101:     PORTD |= cmd & ~(0xF0);
  2451     0340  0873               	movf	LCDWriteCMD@cmd,w
  2452     0341  390F               	andlw	15
  2453     0342  0488               	iorwf	8,f	;volatile
  2454     0343                     l1816:
  2455                           
  2456                           ;lcd.c: 103:     PORTDbits.RD5 = 1;
  2457     0343  1688               	bsf	8,5	;volatile
  2458     0344                     l1818:
  2459                           
  2460                           ;lcd.c: 104:     _delay((unsigned long)((1)*(8000000/4000000.0)));
  2461     0344  2B45               	nop2	;2 cycle nop
  2462     0345                     l1820:
  2463                           
  2464                           ;lcd.c: 105:     PORTDbits.RD5 = 0;
  2465     0345  1283               	bcf	3,5	;RP0=0, select bank0
  2466     0346  1303               	bcf	3,6	;RP1=0, select bank0
  2467     0347  1288               	bcf	8,5	;volatile
  2468                           
  2469                           ;lcd.c: 106:     TRISD |= ~0xF0;
  2470     0348  300F               	movlw	15
  2471     0349  1683               	bsf	3,5	;RP0=1, select bank1
  2472     034A  1303               	bcf	3,6	;RP1=0, select bank1
  2473     034B  0488               	iorwf	8,f	;volatile
  2474     034C                     l1822:
  2475                           
  2476                           ;lcd.c: 107:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  2477     034C  3021               	movlw	33
  2478     034D  00F2               	movwf	??_LCDWriteCMD
  2479     034E                     u1217:
  2480     034E  0BF2               	decfsz	??_LCDWriteCMD,f
  2481     034F  2B4E               	goto	u1217
  2482     0350                     l204:
  2483     0350  0008               	return
  2484     0351                     __end_of_LCDWriteCMD:
  2485                           
  2486                           	psect	text12
  2487     03BE                     __ptext12:	
  2488 ;; *************** function _KBSetup *****************
  2489 ;; Defined at:
  2490 ;;		line 15 in file "keypad.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		status,2
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2504 ;;      Params:         0       0       0       0       0
  2505 ;;      Locals:         0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0
  2507 ;;      Totals:         0       0       0       0       0
  2508 ;;Total ram usage:        0 bytes
  2509 ;; Hardware stack levels used: 1
  2510 ;; Hardware stack levels required when called: 1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518     03BE                     _KBSetup:	
  2519                           ;psect for function _KBSetup
  2520                           
  2521     03BE                     l1052:	
  2522                           ;incstack = 0
  2523                           ; Regs used in _KBSetup: [status,2]
  2524                           
  2525                           
  2526                           ;keypad.c: 17:  TRISB = 0xF0;
  2527     03BE  30F0               	movlw	240
  2528     03BF  1683               	bsf	3,5	;RP0=1, select bank1
  2529     03C0  1303               	bcf	3,6	;RP1=0, select bank1
  2530     03C1  0086               	movwf	6	;volatile
  2531     03C2                     l1054:
  2532                           
  2533                           ;keypad.c: 18:  PORTB = 0x00;
  2534     03C2  1283               	bcf	3,5	;RP0=0, select bank0
  2535     03C3  1303               	bcf	3,6	;RP1=0, select bank0
  2536     03C4  0186               	clrf	6	;volatile
  2537     03C5                     l123:
  2538     03C5  0008               	return
  2539     03C6                     __end_of_KBSetup:
  2540                           
  2541                           	psect	text13
  2542     03AD                     __ptext13:	
  2543 ;; *************** function _isr *****************
  2544 ;; Defined at:
  2545 ;;		line 19 in file "main.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  res             1    0        unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2559 ;;      Params:         0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0
  2561 ;;      Temps:          2       0       0       0       0
  2562 ;;      Totals:         2       0       0       0       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels used: 1
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		Interrupt level 1
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572     03AD                     _isr:	
  2573                           ;psect for function _isr
  2574                           
  2575     03AD                     i1l1124:
  2576                           
  2577                           ;main.c: 21:     uint8_t res;;main.c: 22:     if(INTCONbits.T0IF)
  2578     03AD  1D0B               	btfss	11,2	;volatile
  2579     03AE  2BB0               	goto	u18_21
  2580     03AF  2BB1               	goto	u18_20
  2581     03B0                     u18_21:
  2582     03B0  2BB7               	goto	i1l60
  2583     03B1                     u18_20:
  2584     03B1                     i1l1126:
  2585                           
  2586                           ;main.c: 23:     {;main.c: 24:         INTCONbits.T0IF = 0;
  2587     03B1  110B               	bcf	11,2	;volatile
  2588     03B2                     i1l1128:
  2589                           
  2590                           ;main.c: 25:         TMR0 += 131;
  2591     03B2  3083               	movlw	131
  2592     03B3  1283               	bcf	3,5	;RP0=0, select bank0
  2593     03B4  1303               	bcf	3,6	;RP1=0, select bank0
  2594     03B5  0781               	addwf	1,f	;volatile
  2595     03B6                     i1l1130:
  2596                           
  2597                           ;main.c: 26:         tickms = 1;
  2598     03B6  147A               	bsf	_tickms/(0+8),_tickms& (0+7)	;volatile
  2599     03B7                     i1l60:
  2600     03B7  0871               	movf	??_isr+1,w
  2601     03B8  008A               	movwf	10
  2602     03B9  0E70               	swapf	??_isr,w
  2603     03BA  0083               	movwf	3
  2604     03BB  0EFE               	swapf	btemp,f
  2605     03BC  0E7E               	swapf	btemp,w
  2606     03BD  0009               	retfie
  2607     03BE                     __end_of_isr:
  2608     0002                     ___latbits      equ	2
  2609     007E                     btemp           set	126	;btemp
  2610     007E                     wtemp0          set	126
  2611                           
  2612                           	psect	intentry
  2613     0004                     __pintentry:	
  2614                           ;incstack = 0
  2615                           ; Regs used in _isr: [wreg+status,2+status,0]
  2616                           
  2617     0004                     interrupt_function:
  2618     007E                     saved_w         set	btemp
  2619     0004  00FE               	movwf	btemp
  2620     0005  0E03               	swapf	3,w
  2621     0006  00F0               	movwf	??_isr
  2622     0007  080A               	movf	10,w
  2623     0008  00F1               	movwf	??_isr+1
  2624     0009  120A  118A  2BAD   	ljmp	_isr
  2625                           
  2626                           	psect	config
  2627                           
  2628                           ;Config register CONFIG1 @ 0x2007
  2629                           ;	Oscillator Selection bits
  2630                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2631                           ;	Watchdog Timer Enable bit
  2632                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2633                           ;	Power-up Timer Enable bit
  2634                           ;	PWRTE = 0x1, unprogrammed default
  2635                           ;	RE3/MCLR pin function select bit
  2636                           ;	MCLRE = 0x1, unprogrammed default
  2637                           ;	Code Protection bit
  2638                           ;	CP = 0x1, unprogrammed default
  2639                           ;	Data Code Protection bit
  2640                           ;	CPD = 0x1, unprogrammed default
  2641                           ;	Brown Out Reset Selection bits
  2642                           ;	BOREN = OFF, BOR disabled
  2643                           ;	Internal External Switchover bit
  2644                           ;	IESO = 0x1, unprogrammed default
  2645                           ;	Fail-Safe Clock Monitor Enabled bit
  2646                           ;	FCMEN = 0x1, unprogrammed default
  2647                           ;	Low Voltage Programming Enable bit
  2648                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2649                           ;	In-Circuit Debugger Mode bit
  2650                           ;	DEBUG = 0x1, unprogrammed default
  2651     2007                     	org	8199
  2652     2007  2CF4               	dw	11508

Data Sizes:
    Strings     43
    Constant    0
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      2      16
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCDWriteMsg@str	PTR unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), STR_2(CODE[9]), STR_4(CODE[10]), STR_5(CODE[9]), 

    strcmp@l	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_3(CODE[5]), 

    strcmp@r	PTR const unsigned char  size(1) Largest target is 5
		 -> pass(BANK0[5]), 


Critical Paths under _main in COMMON

    _main->_taskAPP
    _taskAPP->_KBScan
    _taskAPP->_LCDGotoXY
    _LCDWriteMsg->_LCDWriteChar
    _LCDSetup->_LCDWriteCMD

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_taskAPP

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1171
                            _KBSetup
                           _LCDSetup
                           _setupMCU
                            _taskAPP
                            _taskLED
 ---------------------------------------------------------------------------------
 (1) _taskLED                                              2     2      0       0
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _taskAPP                                              4     4      0    1077
                                              6 COMMON     2     2      0
                                              0 BANK0      2     2      0
                          _KBGetChar
                             _KBScan
                          _LCDGotoXY
                        _LCDWriteCMD
                       _LCDWriteChar
                        _LCDWriteMsg
                             _strcmp
 ---------------------------------------------------------------------------------
 (3) _strcmp                                               3     1      2     167
                                              2 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _LCDWriteMsg                                          1     0      1     171
                                              4 COMMON     1     0      1
                       _LCDWriteChar
 ---------------------------------------------------------------------------------
 (3) _LCDWriteChar                                         2     2      0      94
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCDGotoXY                                            4     3      1     167
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _KBScan                                               5     5      0     173
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _KBGetChar                                            1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupMCU                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDSetup                                             2     2      0      94
                                              4 COMMON     2     2      0
                        _LCDWriteCMD
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCMD                                          2     2      0      94
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _KBSetup                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  3     3      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _KBSetup
   _LCDSetup
     _LCDWriteCMD
   _setupMCU
   _taskAPP
     _KBGetChar
     _KBScan
     _LCDGotoXY
     _LCDWriteCMD
     _LCDWriteChar
     _LCDWriteMsg
       _LCDWriteChar
     _strcmp
   _taskLED

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       1      7.1%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      8      11     78.6%
BANK0               80      2      16     20.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      27      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Sep  8 12:44:53 2024

                      pc 0002                       l72 02CA                       l82 0390  
                     l75 02F4                       l99 009D                       u90 02CE  
                     u91 02CD                       fsr 0004                      l210 01EC  
                    l123 03C5                      l211 01EF                      l204 0350  
                    l212 01F2                      l108 0105                      l213 0231  
                    l126 02BA                      l135 01E6                      l208 01E9  
                    l129 02C5                      l219 03AC                      l228 018F  
                    l187 0322                      l970 02D8                      l962 02C6  
                    l778 0264                      l980 02E5                      l972 02DB  
                    l964 02CE                      l990 02EE                      l982 02E6  
                    l974 02DC                      l966 02D2                      l992 02EF  
                    l984 02E7                      l976 02DD                      l968 02D5  
                    l994 02F3                      l986 02EA                      l978 02E1  
                    l988 02EB                      u430 0385                      u431 0384  
                    u440 038F                      u441 038E                      u900 0061  
                    u901 0060                      u910 0071                      u911 0070  
                    u840 03AC                      u920 0096                      u825 0304  
                    u841 03AB                      u921 0095                      u850 02AB  
                    u930 00AA                      u851 02AA                      u835 0213  
                    u931 00A9                      u860 02C1                      u940 00C5  
                    u861 02C0                      u941 00C4                      u870 0248  
                    u950 00E9                      u871 0247                      u951 00E8  
                    u880 0254                      u960 0364                      u881 0253  
                    u961 0363                      u895 0332                      _isr 03AD  
                    fsr0 0004                      indf 0000             ?_LCDWriteCMD 0070  
           ?_LCDWriteMsg 0074                     l1052 03BE                     l1054 03C2  
                   l1450 0388                     l1700 02AB                     l1452 038F  
                   l1444 0373                     l1702 02AD                     l1446 0385  
                   l1720 0191                     l1704 02AF                     l1712 02B5  
                   l1800 0248                     l1448 0387                     l1810 0339  
                   l1730 0196                     l1722 0192                     l1714 02C1  
                   l1706 02B1                     l1650 030D                     l1642 02F6  
                   l1802 0254                     l1820 0345                     l1812 033A  
                   l1716 02C4                     l1708 02B2                     l1660 01E8  
                   l1652 0315                     l1644 02F9                     l1900 0080  
                   l1822 034C                     l1814 033B                     l1806 0324  
                   l1830 012D                     l1750 01A0                     l1742 019C  
                   l1734 0198                     l1726 0194                     l1670 021A  
                   l1654 0316                     l1646 030B                     l1910 0096  
                   l1902 0083                     l1816 0343                     l1808 0327  
                   l1840 0138                     l1832 0131                     l1824 0106  
                   l1680 0226                     l1672 021B                     l1664 01F5  
                   l1656 0317                     l1648 030C                     l1920 00C0  
                   l1912 009A                     l1904 0086                     l1818 0344  
                   l1850 0150                     l1842 0147                     l1834 0133  
                   l1826 010E                     l1770 01AA                     l1762 01A6  
                   l1754 01A2                     l1746 019E                     l1738 019A  
                   l1682 022D                     l1674 021C                     l1666 0203  
                   l1658 031E                     l1690 03A0                     l1930 00E9  
                   l1922 00C5                     l1914 00A0                     l1906 008E  
                   l1860 0163                     l1852 015A                     l1844 0148  
                   l1836 0134                     l1828 0129                     l1692 0296  
                   l1676 0224                     l1668 0205                     l1684 0391  
                   l1932 00EF                     l1924 00CD                     l1908 0090  
                   l1940 035B                     l1870 0171                     l1862 0167  
                   l1854 015B                     l1846 0149                     l1838 0135  
                   l1782 01B0                     l1774 01AC                     l1766 01A8  
                   l1758 01A4                     l1694 029B                     l1678 0225  
                   l1686 0392                     l1926 00D4                     l1918 00AB  
                   l1942 0360                     l1872 0177                     l1864 0168  
                   l1856 015C                     l1848 014C                     l1792 01B4  
                   l1696 029F                     l1688 039E                     l1928 00D7  
                   l1936 00F1                     l1880 0026                     l1944 0364  
                   l1874 017D                     l1866 0169                     l1858 015F  
                   l1786 01B2                     l1778 01AE                     l1698 02A0  
                   l1794 0232                     l1890 0054                     l1882 0027  
                   l1946 0365                     l1938 0351                     l1876 0183  
                   l1868 016A                     l1796 0233                     l1892 005C  
                   l1884 004C                     l1948 036A                     l1878 0189  
                   l1798 0237                     l1894 0061                     l1886 0050  
                   l1896 0071                     l1888 0051                     l1898 007A  
                   ?_isr 0070                     STR_1 026B                     STR_2 0288  
                   STR_3 0291                     STR_4 0275                     STR_5 027F  
                   u1117 0320                     u1207 016F                     u1127 022F  
                   u1217 034E                     u1137 0112                     u1147 011B  
                   u1157 0124                     u1167 013C                     u1177 014E  
                   u1187 0152                     u1197 0161                     i1l60 03B7  
        __end_of_KBSetup 03C6                     _TMR0 0001                     _main 0351  
                   _pass 0029                     btemp 007E                     start 000C  
                  ??_isr 0070            ?_LCDWriteChar 0070         __end_of_LCDSetup 0190  
                  ?_main 0070                    _ANSEL 0188             LCDGotoXY@col 0074  
           LCDGotoXY@row 0072                    u18_20 03B1                    u18_21 03B0  
                  _SPBRG 0099                    _PORTB 0006                    _PORTD 0008  
                  _TRISB 0086                    _TRISD 0088                    _TXREG 0019  
        __end_of_taskAPP 0106          __end_of_taskLED 0391           __pbitbssCOMMON 03D0  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 0373           ??_LCDWriteChar 0072  
                 ??_main 0078        __end_of_LCDGotoXY 0232        __end_of_KBGetChar 01E7  
              ??_KBSetup 0072                   _ANSELH 0189                   i1l1130 03B6  
                 i1l1124 03AD                   i1l1126 03B1                   i1l1128 03B2  
                 _KBScan 0296                   _tickms 03D0            taskAPP@keycnt 0079  
                 _strcmp 0232                ??_taskAPP 0076                ??_taskLED 0072  
       __end_of_setupMCU 02F5                   saved_w 007E  __end_of__initialization 0022  
              ?_LCDSetup 0070           __pcstackCOMMON 0070           _OPTION_REGbits 0081  
              KBScan@col 0075                KBScan@row 0074     __end_of_LCDWriteChar 0323  
             __pbssBANK0 0020                  ?_KBScan 0070               ??_LCDSetup 0074  
                KBScan@i 0073               __pmaintext 0351               __pintentry 0004  
                ?_strcmp 0072                  _KBSetup 03BE               __stringtab 0265  
              ?_setupMCU 0070                  __ptext1 0373                  __ptext2 0026  
                __ptext3 0232                  __ptext4 0391                  __ptext5 02F5  
                __ptext6 01E7                  __ptext7 0296                  __ptext8 0190  
                __ptext9 02C6                  _taskAPP 0026                  _taskLED 0373  
              _LCDGotoXY 01E7                _KBGetChar 0190     end_of_initialization 0022  
             ??_setupMCU 0072                _RCSTAbits 0018                  strcmp@l 0072  
                strcmp@r 0073                _PORTDbits 0008                _PORTEbits 0009  
              _TRISDbits 0088                _TRISEbits 0089               ?_LCDGotoXY 0072  
             ?_KBGetChar 0070           __end_of_KBScan 02C6                _TXSTAbits 0098  
           _LCDWriteChar 02F5               KBGetChar@n 0072           __end_of_strcmp 0265  
    start_initialization 000F            ??_LCDWriteCMD 0072              __end_of_isr 03BE  
          ??_LCDWriteMsg 0075                 ??_KBScan 0072             taskAPP@value 002E  
           taskAPP@state 0078                 ??_strcmp 0074              __pbssCOMMON 0078  
       LCDWriteChar@data 0073                ___latbits 0002            __pcstackBANK0 002E  
               ?_KBSetup 0070              ??_LCDGotoXY 0073              ??_KBGetChar 0072  
             taskAPP@cnt 0025               taskAPP@res 002F      __end_of_LCDWriteCMD 0351  
             taskLED@cnt 0027      __end_of_LCDWriteMsg 03AD         LCDWriteNum@F1440 0020  
              __pstrings 0265                 ?_taskAPP 0070                 ?_taskLED 0070  
        LCDGotoXY@DDaddr 0075        interrupt_function 0004                 _LCDSetup 0106  
               _PIR1bits 000C              __stringbase 026A              _LCDWriteCMD 0323  
            _LCDWriteMsg 0391       __end_of__stringtab 026B                 __ptext10 0106  
               __ptext11 0323                 __ptext12 03BE                 __ptext13 03AD  
               _setupMCU 02C6           LCDWriteCMD@cmd 0073               _INTCONbits 000B  
               intlevel1 0000           LCDWriteMsg@str 0074                stringcode 0265  
             _OSCCONbits 008F                 stringdir 0265                 stringtab 0265  
